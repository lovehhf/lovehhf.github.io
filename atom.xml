<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晨飞小窝</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.ichenfei.com/"/>
  <updated>2019-12-07T17:40:48.716Z</updated>
  <id>http://blog.ichenfei.com/</id>
  
  <author>
    <name>lovehhf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Redis学习】Redis数据类型与常用命令</title>
    <link href="http://blog.ichenfei.com/2019/12/08/%E3%80%90Redis%E5%AD%A6%E4%B9%A0%E3%80%91Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://blog.ichenfei.com/2019/12/08/%E3%80%90Redis%E5%AD%A6%E4%B9%A0%E3%80%91Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2019-12-07T16:19:38.000Z</published>
    <updated>2019-12-07T17:40:48.716Z</updated>
    
    <content type="html"><![CDATA[<p>String、List、Hash、Set、SortedSet的常用方法和底层编码实现</p><a id="more"></a><h2 id="STRING-（字符串）"><a href="#STRING-（字符串）" class="headerlink" title="STRING （字符串）"></a>STRING （字符串）</h2><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>底层由SDS(Simple Dynamic String, 简单动态字符串)实现。</p><p>特点: </p><ul><li>1个 <code>value</code> 最大支持 <code>512M</code> 的数据</li><li>可以存储二进制字符串</li></ul><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令:"></a>常用命令:</h3><ul><li>SET key value<ul><li>设置 <code>key</code> 的值的 <code>value</code></li></ul></li><li>GET key<ul><li>获取 <code>key</code> 的值</li></ul></li><li>INCR key<ul><li><code>key</code> 的值自加1</li><li>key 的值必须要是整数 且要在64位int范围内 <code>[-2^63, 2^63 - 1]</code></li></ul></li><li>INCRBY key increment<ul><li><code>key += increment</code></li></ul></li><li>DECR key<ul><li>key的值自减1</li></ul></li><li>DECRBY key increment<ul><li><code>key -=  increment</code></li></ul></li><li>GETSET key value<ul><li>设置key的值并返回老的值</li></ul></li><li>SETRANGE key offset value<ul><li><code>key</code> 的值从 <code>offset</code> 开始设置为 <code>value</code></li><li>key看做是一个指针, 这个命令把key + offert的地址开始设置为了value，不检查长度</li></ul></li><li>MGET key [key …]<ul><li>获取多个 <code>key</code> 的值</li></ul></li><li>MSET key value [key value …]<ul><li>同时设置多个键的值</li></ul></li><li>SETNX key value<ul><li>只有 <code>key</code> 不存在的时候才设置 <code>key</code> 的值为 <code>value</code></li></ul></li><li>SETEX key seconds value<ul><li>设置 <code>key</code> 的过期时间, 过期就自动被删了</li></ul></li></ul><h2 id="LIST-（列表）"><a href="#LIST-（列表）" class="headerlink" title="LIST （列表）"></a>LIST （列表）</h2><h3 id="实现原理-1"><a href="#实现原理-1" class="headerlink" title="实现原理"></a>实现原理</h3><p>底层使用 <code>quicklist</code> 实现，<code>quicklist</code> 是一个 <code>ziplist</code> 的双向链表, 每个 <code>ziplist</code> 最大值可在配置文件中的<code>list-max-ziplist-size</code>设置, 默认为 <code>-2 (8kb)</code></p><p>Redis的列表与双端队列(deque)类似</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li>RPUSH key value [value …]<ul><li>将值推入到列表 <code>key</code> 的右端</li><li>相当于 <code>python</code> 的 <code>append()</code></li></ul></li><li>LPUSH key value [value …]<ul><li>将值推入列表左端</li><li>相当于 <code>python</code> 列表的 <code>insert(0, value)</code></li><li>将多个 <code>value</code> 按从左到右的顺序 <code>lpush</code>，最右边的值在最左边</li></ul></li><li>LPOP<ul><li>列表左端弹出一个值并返回弹出的值</li></ul></li><li>RPOP<ul><li>列表右端弹出一个值</li></ul></li><li>LRANGE key start stop<ul><li>获取列表在指定范围上的所有值, 包括 <code>start</code> 和 <code>stop</code></li></ul></li><li>LINDEX<ul><li>获取列表在给定位置上的单个元素</li></ul></li><li>LSET key index value<ul><li>设置列表 <code>key</code> 的索引为 <code>index</code> 的值 <code>value</code></li></ul></li><li>LTRIM key start stop<ul><li>只保留索引 在 <code>[start, end]</code> 中的元素的值, 干掉其他的</li></ul></li><li>LINSERT key BEFORE|AFTER pivot value<ul><li>在列表 <code>key</code> 的值为 <code>pivot</code> 的元素前或后插入一个值为 <code>value</code> 的元素</li><li>存在多个相同值的元素只管最左侧的元素</li><li>成功: 返回列表长度, 指定元素不存在不执行操作, 返回-1, 列表不存在返回0</li></ul></li></ul><h2 id="HASH-（哈希表）"><a href="#HASH-（哈希表）" class="headerlink" title="HASH （哈希表）"></a>HASH （哈希表）</h2><h3 id="实现原理-2"><a href="#实现原理-2" class="headerlink" title="实现原理"></a>实现原理</h3><p>底层由 <code>hashtable</code> 与 <code>ziplist</code> 实现</p><p>满足以下2个条件是使用 <code>ziplist</code>, 否则转化为<code>hashtable</code>编码</p><ul><li>哈希保存的键值对数量小于 <code>hash-max-ziplist-entries</code> (默认为 <code>512</code> )个 </li><li>所有键值对的键和值的字符串长度都小于 <code>hash-max-ziplist-value</code> (默认为 <code>64</code>) 字节</li></ul><p>和 Python 的字典类似, 不过 Redis 的 HASH 的 key 和 value 都只能是STRING, 不能嵌套</p><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法:"></a>常用方法:</h3><ul><li>HSET key field value<ul><li>将哈希表 <code>key</code> 中的字段 <code>field</code> 的值设为 <code>value</code></li></ul></li><li>HGET key field<ul><li>获取哈希表 <code>key</code> 中字段 <code>field</code> 的值</li></ul></li><li>HEXISTS key field<ul><li>查询哈希表 <code>key</code> 中，指定字段 <code>filed</code> 是否存在</li></ul></li><li>HVALS key<ul><li>获取哈希表 <code>key</code> 中的所有值</li></ul></li><li>HLEN key<ul><li>获取哈希表中键值对的数量</li></ul></li><li>HKEYS key<ul><li>获取哈希表 <code>key</code> 中的所有键</li></ul></li></ul><h2 id="SET-（集合）"><a href="#SET-（集合）" class="headerlink" title="SET （集合）"></a>SET （集合）</h2><h4 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h4><p>底层由 <code>hashtable</code> 和 <code>intset</code> 实现</p><p>当集合的元素都是整数 且 元素个数小于 <code>set-max-intset-entries</code> (默认为512) 时集合的编码对象是intset, 其他情况都是哈希表</p><h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>SADD key member [member …]<ul><li>将<code>member</code>添加到集合<code>key</code>中</li></ul></li><li>SMEMBERS key<ul><li>获取集合<code>key</code>的所有元素</li></ul></li><li>SCARD key<ul><li>获取集合的元素数量</li></ul></li><li>SDIFF key1 [key2 …]<ul><li>求给定所有集合的差集(<code>s1-s2-s3-...</code>)</li></ul></li><li>SINTER key1 [key2]<ul><li>求给你所有集合的交集(<code>s1&amp;s2&amp;s3...</code>)</li></ul></li><li>SUNION key1 [key1…]<ul><li>求给定所有集合的并集(<code>s1|s2|s3...</code>)</li></ul></li><li>SDIFFSTORE destination key1 [key2 …]<ul><li>求给定所有集合的差集, 并存储到<code>destination</code>中</li></ul></li><li>SINTERSTORE destination key [key …]<ul><li>求给定所有集合的交集, 并存储到<code>destination</code>中</li></ul></li><li>SUNIONSTORE destination key [key …]<ul><li>求给定所有集合的并集, 并存储到<code>destination</code>中</li></ul></li><li>SREM key member [member …]<ul><li>从集合中删除一个或多个元素</li></ul></li><li>SPOP key [count]<ul><li>随机删除<code>count</code>个幸运元素, 不指定<code>count</code>则随机删除一个</li></ul></li><li>SMOVE source destination member<ul><li>将<code>member</code>从集合<code>source</code>移动到<code>destination</code>中 </li><li>删掉<code>source</code>中的<code>member</code>同时向<code>destination</code>中添加<code>member</code>(不管destination中有没有)</li></ul></li><li>SISMEMBER key member<ul><li>判断<code>member</code>是否是集合中的元素</li></ul></li></ul><h2 id="SORTED-SET-（有序集合）"><a href="#SORTED-SET-（有序集合）" class="headerlink" title="SORTED_SET （有序集合）"></a>SORTED_SET （有序集合）</h2><h3 id="底层实现-1"><a href="#底层实现-1" class="headerlink" title="底层实现"></a>底层实现</h3><p>底层由<code>ziplist</code>和<code>skiplist</code>(跳表实现)</p><h3 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>ZADD key [NX|XX] [CH] [INCR] score member [score member …]<ul><li>将一个或多个 <code>member</code> 元素及其 <code>score</code> 值加入到有序集合 <code>key</code> 中</li><li>如果某个 <code>member</code> 已经是有序集合的元素，那么更新这个 <code>member</code> 的 <code>score</code> 值</li><li>参数：<ul><li>XX： 仅更新已经存在的元素, 不添加元素。</li><li>NX： 只添加新元素, 不改变已有元素</li><li>CH： 将返回值修改为添加和修改的元素数量总数(不加此参数值返回添加的元素数量)</li><li>INCR: 将<code>member</code>的分值加上<code>score</code>(与<code>ZINCRBY</code>功能相同)</li></ul></li></ul></li><li>ZSCORE key member<ul><li>获取有序集合中指定元素的分数</li></ul></li><li>ZCARD key<ul><li>获取有序集合<code>key</code>的元素数量</li></ul></li><li>ZCOUNT key min max<ul><li>获取值在<code>[min, max]</code>之间的元素数量</li></ul></li><li>ZRANGE key start stop [WITHSCORES]<ul><li>获取有序集合 key 中，索引在[start, stop]的元素(从小到大排序)</li><li><code>-1</code>表示最后一个元素, <code>-2</code>表示倒数第二个元素</li></ul></li><li>ZREVRANGE key start stop [WITHSCORES]<ul><li>与<code>ZRANGE</code>功能相同， 从大到小排序</li></ul></li><li>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]<ul><li>获取有序集合中分数在<code>[min, max]</code>中的元素</li><li><code>min</code>和<code>max</code>可以是<code>inf</code>和<code>-inf</code></li></ul></li><li>ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]<ul><li>与<code>ZRANGEBYSCORE</code>功能相同, 从大到小排序</li></ul></li><li>ZRANK key member<ul><li>返回有序集合中member元素的排名(按分值从小到大排序), 分值相同按键的<code>ascii</code>字母排序</li></ul></li><li>ZREVRANK key member<ul><li>返回 <code>member</code> 元素从大到小的排名</li></ul></li><li>ZREM key member [member …]<ul><li>删除有序集合中指定的元素</li></ul></li><li>ZREMRANGEBYRANK key start stop<ul><li>删除有序集合中排名在<code>[start, stop]</code>之间的元素</li></ul></li><li>ZREMRANGEBYSCORE key min max<ul><li>删除值在<code>[min, max]</code>之间的元素</li></ul></li><li>ZINTERSTORE destination numkeys key [key …] [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX]<ul><li>计算给定的一个或多个有序集的交集，其中给定 key 的数量必须以 numkeys 参数指定，并将该交集(结果集)储存到 destination</li></ul></li><li>ZUNIONSTORE destination numkeys key [key …] [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX]<ul><li>计算给定的一个或多个有序集的并集，其中给定 key 的数量必须以 numkeys 参数指定，并将该并集(结果集)储存到 destination</li><li><code>WEIGHTS</code> 参数可指定权重</li><li><code>AGGREGATE</code> 参数可指定聚合方式 和|最大值|最小值, 默认是 SUM</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;String、List、Hash、Set、SortedSet的常用方法和底层编码实现&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="redis" scheme="http://blog.ichenfei.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>【算法学习】01背包与完全背包（dp）</title>
    <link href="http://blog.ichenfei.com/2019/12/07/%E3%80%90%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E3%80%9101%E8%83%8C%E5%8C%85%E4%B8%8E%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%EF%BC%88dp%EF%BC%89/"/>
    <id>http://blog.ichenfei.com/2019/12/07/%E3%80%90%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E3%80%9101%E8%83%8C%E5%8C%85%E4%B8%8E%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%EF%BC%88dp%EF%BC%89/</id>
    <published>2019-12-06T16:18:28.000Z</published>
    <updated>2019-12-06T16:21:46.806Z</updated>
    
    <content type="html"><![CDATA[<p>01背包: 每件物品只能取一次<br>完全背包: 每件物品可以取无限次</p><a id="more"></a><h2 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h2><p>题目链接: <a href="https://www.acwing.com/activity/content/problem/content/997/1/" target="_blank" rel="noopener">AcWing 2. 01背包问题</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h3><p>有 <code>N</code> 件物品和一个容量是 <code>V</code> 的背包。<strong>每件物品只能使用一次</strong></p><p>第 <code>i</code> 件物品的体积是 <code>v[i]</code>，价值是 <code>w[i]</code>。</p><p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>输出最大价值。</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><ul><li>状态表示: <ul><li><code>f[i][j]</code>: 只从前<code>i</code>件物品中选, 且总体积<code>&lt;=j</code>的最大价值</li></ul></li><li>状态划分<ul><li>以选不选第<code>i</code>件物品划分</li><li>不选第<code>i</code>件物品: <code>f[i][j] = f[i - 1][j]</code></li><li>选第<code>i</code>件物品:<ul><li>前提: 需要<code>j &gt;= v[i]</code>才能把第<code>i</code>件物品放入背包</li><li>选了第i件物品，背包的容量<code>j</code>需要减掉<code>v[i]</code></li><li><code>f[i][j] = f[i][j - v[i]] + w[i]</code></li></ul></li></ul></li><li>状态计算:<ul><li><code>f[i][j] = max(f[i - 1][j], f[i][j - v[i]] + w[i])</code></li></ul></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h3><h4 id="C-代码"><a href="#C-代码" class="headerlink" title="C++ 代码"></a>C++ 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="keyword">int</span> v[N], w[N];</span><br><span class="line"><span class="keyword">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// n表示n件物品, m表示背包容量</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 状态转移方程中用到了i - 1, 所以i从1开始</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) <span class="built_in">cin</span> &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 状态转移: 背包的容量大于物品的体积的时候才有可能选第i件物品</span></span><br><span class="line">            f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(j &gt;= v[i]) f[i][j] = max(f[i][j], f[i - <span class="number">1</span>][j - v[i]] + w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f[n][m] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优化空间复杂度"><a href="#优化空间复杂度" class="headerlink" title="优化空间复杂度"></a>优化空间复杂度</h4><p>一般是对对动态规划的代码或计算方程做等价变形</p><p>01背包的动态转移方程: <code>f[i][j] = max(f[i - 1][j], f[i - 1][j - v[i]] + w[i])</code> 中<code>f[i]</code>的状态只用到了第<code>f[i - 1]</code>的状态</p><p>可以使用滚动数组更新第<code>i</code>层的状态</p><p>新的状态转移方程: <code>for(int j = m; j &gt;= v[i]; j--) f[j] = max(f[j], f[j - v[i]] + w[i])</code></p><p>要注意的是01背包的<code>j</code>要从大到小遍历, <code>f[j - v[i]]</code> 的值才会是<code>f[i - 1][j - v[i]] + w[i]</code>的值</p><p>从小到大遍历的话更新f[j] 的时候 f[j - v[i]] 已经被刷新掉了</p><h4 id="优化后的代码"><a href="#优化后的代码" class="headerlink" title="优化后的代码"></a>优化后的代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="keyword">int</span> v[N], w[N];</span><br><span class="line"><span class="keyword">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// n表示n件物品, m表示背包容量</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 状态转移方程中用到了i - 1, 所以i从1开始</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">cin</span> &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= v[i]; j --)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 右边的f[j]和f[j - v[i]]都是i - 1时更新的</span></span><br><span class="line">            f[j] = max(f[j], f[j - v[i]] + w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f[m] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python版"><a href="#Python版" class="headerlink" title="Python版:"></a>Python版:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    n, m = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().split()]</span><br><span class="line">    v, w, f = [<span class="number">0</span>] * (n + <span class="number">1</span>), [<span class="number">0</span>] * (n + <span class="number">1</span>), [<span class="number">0</span>] * (m + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        v[i], w[i] = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().split()]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m, v[i] - <span class="number">1</span>, <span class="number">-1</span>):</span><br><span class="line">            f[j] = max(f[j], f[j - v[i]] + w[i])</span><br><span class="line"></span><br><span class="line">    print(f[m])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h3 id="01背包的简单应用"><a href="#01背包的简单应用" class="headerlink" title="01背包的简单应用"></a>01背包的简单应用</h3><p><a href="https://www.acwing.com/problem/content/605/" target="_blank" rel="noopener">打怪兽</a></p><p>腾讯的一道笔试题</p><p>小Q打算穿越怪兽谷，他不会打怪，但是他有钱<br>他知道，只要给怪兽一定的金币，怪兽就会一直护送着他出谷。<br>在谷中，他会依次遇见N只怪兽，每只怪兽都有自己的武力值和要<code>贿赂</code>它所需的金币数。<br>如果小Q没有<code>贿赂</code>某只怪兽，而这只怪兽<code>武力值</code>又大于护送他的怪兽武力之和，这只怪兽就会攻击他。<br>小Q想知道，要想成功穿越怪兽谷而不被攻击，他最少要准备多少金币。</p><p>输入格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一行包含整数N，表示怪兽的数量。</span><br><span class="line">第二行包含N个整数d1,d2,…,dn，表示每只怪兽的武力值。</span><br><span class="line">第三行包含N个整数p1,p2,…,pn，表示收买N只怪兽所需的金币数。</span><br></pre></td></tr></table></figure></p><p>输出格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出一个整数，表示所需最小金币数。</span><br></pre></td></tr></table></figure><p>数据范围</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1≤N≤50</span><br><span class="line">1≤d[i]≤10^12,</span><br><span class="line">1≤p[i]≤2</span><br></pre></td></tr></table></figure><p>输入样例1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">8 5 10</span><br><span class="line">1 1 2</span><br></pre></td></tr></table></figure></p><p>输出样例1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure></p><p>输入样例2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 2 4 8</span><br><span class="line">1 2 1 2</span><br></pre></td></tr></table></figure></p><p>输出样例2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure></p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>对于第<code>i</code>只怪兽, 可以选择贿赂或者不贿赂, 当前的战斗力小于怪兽的战斗力时, 只能选择贿赂收买怪兽。</p><ul><li>状态表示: <ul><li><code>f[i][j]</code>表示花到第<code>i</code>只怪兽处花<code>j</code>金币小Q能达到的最大战斗力</li></ul></li><li>状态计算: <ul><li>不收买怪兽<ul><li>前提: 当前战斗力比怪兽高, 即 <code>f[i - 1][j] &gt;= d[i]</code> </li><li><code>f[i][j] = f[i - 1][j]</code></li></ul></li><li>收买怪兽:<ul><li>前提: <code>j &gt;= p[i]</code> 且 花<code>j - d[i]</code>的金币能走到第<code>i</code>只怪兽处即<code>j &gt;= p[i] &amp;&amp; f[i - 1][j - p[i]] &gt;= d[i - 1]</code> </li><li><code>f[i][j] = f[i - 1][j - d[i]] + p[i]</code></li></ul></li></ul></li><li>答案：<code>f[n][i] &gt; 0 的最小的i</code></li></ul><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><p>C++： 注意数据范围会爆<code>int</code>;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> d[N], p[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[N][<span class="number">2</span> * N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">cin</span> &gt;&gt; d[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 第1只怪兽是一定要买的</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = p[<span class="number">1</span>]; i &lt;= <span class="number">2</span> * n; i ++) f[<span class="number">1</span>][i] = d[<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2 * n 是要花的金币的最大值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">2</span> * n; j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 战斗力比怪兽高可以不买这只怪兽</span></span><br><span class="line">            <span class="keyword">if</span>(f[i - <span class="number">1</span>][j] &gt;= d[i]) f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 买的起第i只怪兽, 要看买还是不买划算</span></span><br><span class="line">            <span class="keyword">if</span>(j &gt;= p[i] &amp;&amp; f[i - <span class="number">1</span>][j - p[i]] &gt;= d[i - <span class="number">1</span>]) f[i][j] = max(f[i - <span class="number">1</span>][j], f[i - <span class="number">1</span>][j - p[i]] + d[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span> * n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (f[n][i] &gt; <span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Python代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    n = int(input())</span><br><span class="line">    d = [<span class="number">0</span>] + [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().split()]</span><br><span class="line">    p = [<span class="number">0</span>] + [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().split()]</span><br><span class="line">    f = [[<span class="number">0</span>] * (<span class="number">2</span> * n + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(p[<span class="number">1</span>], <span class="number">2</span> * n + <span class="number">1</span>):</span><br><span class="line">        f[<span class="number">1</span>][i] = d[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span> * n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span>(f[i - <span class="number">1</span>][j] &gt;= d[i]):</span><br><span class="line">                f[i][j] = f[i - <span class="number">1</span>][j]</span><br><span class="line">            <span class="keyword">if</span>(j &gt;= p[i] <span class="keyword">and</span> f[i - <span class="number">1</span>][j - p[i]] &gt;= d[i - <span class="number">1</span>]):</span><br><span class="line">                f[i][j] = max(f[i - <span class="number">1</span>][j], f[i - <span class="number">1</span>][j - p[i]] + d[i])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span> * n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span>(f[n][i] &gt; <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">            </span><br><span class="line">print(main())</span><br></pre></td></tr></table></figure><h2 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;01背包: 每件物品只能取一次&lt;br&gt;完全背包: 每件物品可以取无限次&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="dp, 背包问题" scheme="http://blog.ichenfei.com/tags/dp-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>【算法学习】Leetcode 10. 正则表达式匹配</title>
    <link href="http://blog.ichenfei.com/2019/12/01/%E3%80%90%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E3%80%91Leetcode-10-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
    <id>http://blog.ichenfei.com/2019/12/01/%E3%80%90%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E3%80%91Leetcode-10-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</id>
    <published>2019-11-30T16:44:25.000Z</published>
    <updated>2019-11-30T18:57:40.078Z</updated>
    
    <content type="html"><![CDATA[<p>原题链接: <a href="https://leetcode-cn.com/problems/regular-expression-matching/" target="_blank" rel="noopener">Leetcode 10. 正则表达式匹配</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 ‘.’ 和 ‘*’ 的正则表达式匹配。</p><p><code>&#39;.&#39;</code> 匹配任意单个字符<br><code>&#39;*&#39;</code> 匹配零个或多个前面的那一个元素</p><p>所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。</p><p>说明:</p><p><code>s</code> 可能为空，且只包含从 <code>a-z</code> 的小写字母。<br><code>p</code> 可能为空，且只包含从 <code>a-z</code> 的小写字母，以及字符 <code>.</code> 和 <code>*</code>。</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>二维dp</p><ul><li>状态表示:<ul><li><code>dp[i][j]</code>: 字符串<code>s前i个字母</code>能否被<code>p的前j个字母</code>表示</li></ul></li><li>状态计算:<ul><li>枚举<code>p[j]</code>的所有可能的字母</li><li><code>s[i] = p[j]</code> 或 <code>p[j] = &#39;.&#39;</code><ul><li><code>dp[i][j] = dp[i - 1][j - 1]</code></li></ul></li><li><code>p[j] = &#39;*&#39;</code><ul><li>不使用<code>*</code><ul><li>需要s[1~i]与p[1~j]匹配上: </li><li><code>dp[i][j] = dp[i][j - 2]</code></li></ul></li><li>使用<code>*</code><ul><li>需要<code>s[i] = p[j - 1]</code>或者<code>p[j - 1] = .</code>才可以用<code>*</code></li><li>需要<code>s[1 ~ i-1]</code>与<code>p[1~j]</code>匹配上</li><li><code>dp[i][j] = dp[i - 1][j]</code></li></ul></li></ul></li></ul></li></ul><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m, n;</span><br><span class="line">        n = s.size(), m = p.size();</span><br><span class="line">        <span class="comment">// 初始化, 先给s和p加' '不用处理边界</span></span><br><span class="line">        s = <span class="string">' '</span> + s;</span><br><span class="line">        p = <span class="string">' '</span> + p;</span><br><span class="line">        <span class="comment">// 定义一个n行m列的bool数组, 初始化为false</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; dp(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(m + <span class="number">1</span>, <span class="literal">false</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先把s为空的情况处理了, 就不用在后面的循环加判断条件处理</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= m; i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p[i] == <span class="string">'*'</span>) dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 正常转移</span></span><br><span class="line">                <span class="keyword">if</span>(p[j] == <span class="string">'.'</span> || s[i] == p[j]) dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 非正常转移</span></span><br><span class="line">                    <span class="keyword">if</span>(p[j] == <span class="string">'*'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 没用到*的情况， 从dp[i][j - 2], 表示*和*前面的数都不使用</span></span><br><span class="line">                        dp[i][j] = dp[i][j - <span class="number">2</span>];</span><br><span class="line">                        <span class="comment">// 用到了*的情况, 从dp[i - 1][j]转移</span></span><br><span class="line">                        <span class="keyword">if</span>(p[j - <span class="number">1</span>] == <span class="string">'.'</span> || s[i] == p[j - <span class="number">1</span>]) dp[i][j] = dp[i][j] | dp[i - <span class="number">1</span>][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][m];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(self, s: str, p: str)</span> -&gt; bool:</span></span><br><span class="line">        s, p = <span class="string">' '</span> + s, <span class="string">' '</span> + p</span><br><span class="line">        n, m = len(s), len(p)</span><br><span class="line">        dp = [[<span class="number">0</span>] * m <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        <span class="comment"># p匹配空字符串的特殊情况</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, m):</span><br><span class="line">            <span class="keyword">if</span> p[i] == <span class="string">'*'</span>:</span><br><span class="line">                dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i - <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, m):</span><br><span class="line">                <span class="keyword">if</span> (s[i] == p[j] <span class="keyword">or</span> p[j] == <span class="string">'.'</span>):</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> p[j] == <span class="string">'*'</span>:</span><br><span class="line">                        dp[i][j] = dp[i][j - <span class="number">2</span>]</span><br><span class="line">                        <span class="keyword">if</span> (p[j - <span class="number">1</span>] == <span class="string">'.'</span> <span class="keyword">or</span> s[i] == p[j - <span class="number">1</span>]):</span><br><span class="line">                            dp[i][j] |= dp[i - <span class="number">1</span>][j]</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>][m - <span class="number">1</span>] == <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原题链接: &lt;a href=&quot;https://leetcode-cn.com/problems/regular-expression-matching/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode 10. 正则表达式匹配&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 ‘.’ 和 ‘*’ 的正则表达式匹配。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;#39;.&amp;#39;&lt;/code&gt; 匹配任意单个字符&lt;br&gt;&lt;code&gt;&amp;#39;*&amp;#39;&lt;/code&gt; 匹配零个或多个前面的那一个元素&lt;/p&gt;
&lt;p&gt;所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。&lt;/p&gt;
&lt;p&gt;说明:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;s&lt;/code&gt; 可能为空，且只包含从 &lt;code&gt;a-z&lt;/code&gt; 的小写字母。&lt;br&gt;&lt;code&gt;p&lt;/code&gt; 可能为空，且只包含从 &lt;code&gt;a-z&lt;/code&gt; 的小写字母，以及字符 &lt;code&gt;.&lt;/code&gt; 和 &lt;code&gt;*&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="dp" scheme="http://blog.ichenfei.com/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>【算法学习】AcWing 899. 编辑距离(dp)</title>
    <link href="http://blog.ichenfei.com/2019/11/30/%E3%80%90%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E3%80%91AcWing%20899.%20%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB%E3%80%90dp%E3%80%91/"/>
    <id>http://blog.ichenfei.com/2019/11/30/%E3%80%90%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E3%80%91AcWing%20899.%20%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB%E3%80%90dp%E3%80%91/</id>
    <published>2019-11-30T07:00:02.000Z</published>
    <updated>2019-11-30T09:06:21.484Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AcWing-902-最短编辑距离"><a href="#AcWing-902-最短编辑距离" class="headerlink" title="AcWing 902. 最短编辑距离"></a><a href="https://www.acwing.com/problem/content/904/" target="_blank" rel="noopener">AcWing 902. 最短编辑距离</a></h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定两个字符串A和B，现在要将A经过若干操作变为B，可进行的操作有：<br>删除–将字符串A中的某个字符删除。<br>插入–在字符串A的某个位置插入某个字符。<br>替换–将字符串A中的某个字符替换为另一个字符。<br>现在请你求出，将A变为B至少需要进行多少次操作。</p><a id="more"></a><p><strong>输入格式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第一行包含整数n，表示字符串A的长度。</span><br><span class="line">第二行包含一个长度为n的字符串A。</span><br><span class="line">第三行包含整数m，表示字符串B的长度。</span><br><span class="line">第四行包含一个长度为m的字符串B。</span><br><span class="line">字符串中均只包含大写字母。</span><br></pre></td></tr></table></figure></p><p><strong>输出格式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出一个整数，表示最少操作次数。</span><br></pre></td></tr></table></figure></p><p><strong>数据范围</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1≤n,m≤1000</span><br></pre></td></tr></table></figure></p><p><strong>输入样例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10 </span><br><span class="line">AGTCTGACGC</span><br><span class="line">11 </span><br><span class="line">AGTAAGTAGGC</span><br></pre></td></tr></table></figure></p><p><strong>输出样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>二维dp问题</p><ul><li>状态表示:<ul><li><code>dp[i][j]</code>表示第一个字符串的前i个字母编辑到第二个字符串的前j个字母的最小编辑距离</li></ul></li><li>状态计算:<ul><li>枚举字符串a前i个字母到字符串b前j个字母的最后一步的操作(增/删/改)</li><li>添加一个字母:<ul><li>要先做到<code>a的前i个字母与b的前j - 1个字母匹配</code>, a[1~i]添加一个字母才能与b[1~j]匹配</li><li><code>dp[i][j] = dp[i - 1][j] + 1</code></li></ul></li><li>删除一个字母:<ul><li>要先做到<code>a的前i - 1个字母与b的前j个字母匹配</code>，a[1~i]添加一个字母才能与b[1~j]匹配</li><li><code>dp[i][j] = dp[i][j - 1] + 1</code></li></ul></li><li>修改一个字母<ul><li>要先做到a[1~i-1]与b[1~j-1]匹配</li><li>a[i]与b[j]相同: <code>dp[i][j] = dp[i - 1][j - 1]</code></li><li>a[i]与b[j]不同: <code>dp[i][j] = dp[i - 1][j - 1] + 1</code></li></ul></li><li>状态转移方程：<ul><li><code>dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + (a[i] != b[j]))</code></li></ul></li></ul></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> a[N], b[N];</span><br><span class="line"><span class="comment">// f[i][j]表示A[1~i]到B[1~j]最小的编辑距离</span></span><br><span class="line"><span class="keyword">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        f[i][<span class="number">0</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">        f[<span class="number">0</span>][i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 枚举最后一步的编辑方式(添加/删除/修改), 取最小值</span></span><br><span class="line">            f[i][j] = min(f[i - <span class="number">1</span>][j] + <span class="number">1</span>, f[i][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">            f[i][j] = min(f[i][j], f[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="keyword">int</span>(a[i] != b[j]));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f[n][m] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python"><a href="#Python" class="headerlink" title="Python:"></a>Python:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    n = int(input())</span><br><span class="line">    a = <span class="string">' '</span>+ input()</span><br><span class="line">    m = int(input())</span><br><span class="line">    b = <span class="string">' '</span> + input()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    f = [[<span class="number">0</span>] * (m + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n + <span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        f[i][<span class="number">0</span>] = i</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">        f[<span class="number">0</span>][i] = i</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 取三种操作的最小值</span></span><br><span class="line">            f[i][j] = min(f[i - <span class="number">1</span>][j] + <span class="number">1</span>, f[i][j - <span class="number">1</span>] + <span class="number">1</span>, f[i - <span class="number">1</span>][j - <span class="number">1</span>] + (a[i] != b[j]))</span><br><span class="line">            </span><br><span class="line">    print(f[n][m])</span><br><span class="line">    </span><br><span class="line">main()</span><br></pre></td></tr></table></figure><hr><h2 id="AcWing-899-编辑距离"><a href="#AcWing-899-编辑距离" class="headerlink" title="AcWing 899. 编辑距离"></a><a href="https://www.acwing.com/problem/content/901/" target="_blank" rel="noopener">AcWing 899. 编辑距离</a></h2><p>给定n个长度不超过10的字符串以及m次询问，每次询问给出一个字符串和一个操作次数上限。</p><p>对于每次询问，请你求出给定的n个字符串中有多少个字符串可以在上限操作次数内经过操作变成询问给出的字符串。</p><p>每个对字符串进行的单个字符的插入、删除或替换算作一次操作。</p><p><strong>输入格式</strong></p><p>第一行包含两个整数n和m。</p><p>接下来n行，每行包含一个字符串，表示给定的字符串。</p><p>再接下来m行，每行包含一个字符串和一个整数，表示一次询问。</p><p>字符串中只包含小写字母，且长度均不超过10。</p><p><strong>输出格式</strong></p><p>输出共m行，每行输出一个整数作为结果，表示一次询问中满足条件的字符串个数。</p><p><strong>数据范围</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1≤n,m≤1000,</span><br></pre></td></tr></table></figure><p><strong>输入样例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3 2</span><br><span class="line">abc</span><br><span class="line">acd</span><br><span class="line">bcd</span><br><span class="line">ab 1</span><br><span class="line">acbd 2</span><br></pre></td></tr></table></figure></p><p><strong>输出样例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br></pre></td></tr></table></figure></p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>最短编辑距离的应用, 求n次最短编辑距离</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><h4 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>, M = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> s[N][M];</span><br><span class="line"><span class="keyword">int</span> f[M][M];</span><br><span class="line"></span><br><span class="line"><span class="comment">// a是否能在&lt;=t的次数下编辑到b</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">can_solve</span><span class="params">(<span class="keyword">char</span> a[], <span class="keyword">char</span> b[], <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> la = <span class="built_in">strlen</span>(a + <span class="number">1</span>), lb = <span class="built_in">strlen</span>(b + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= la; i++) f[i][<span class="number">0</span>] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lb; i++) f[<span class="number">0</span>][i] = i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求a最小需要编辑多少次可以到b</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= la; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= lb; j++) &#123;</span><br><span class="line">            f[i][j] = min(f[i - <span class="number">1</span>][j] + <span class="number">1</span>, f[i][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">            f[i][j] = min(f[i][j], f[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="keyword">int</span>(a[i] != b[j]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> f[la][lb] &lt;= t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">cin</span> &gt;&gt; s[i] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(m --) &#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="keyword">char</span> q[M];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; q + <span class="number">1</span> &gt;&gt; t;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) res += can_solve(s[j], q, t);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">can_solve</span><span class="params">(a, b, t)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    求字符串a是否能在t的次数内编辑到b</span></span><br><span class="line"><span class="string">    为了方便计算, a和b在前面随便加个字符占位</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    a = <span class="string">' '</span> + a</span><br><span class="line">    b = <span class="string">' '</span> + b</span><br><span class="line">    la, lb = len(a), len(b)</span><br><span class="line">    dp = [[<span class="number">0</span>] * lb <span class="keyword">for</span> _ <span class="keyword">in</span> range(la)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化：a[i]到空字符串的编辑距离为i, 空字符串到b[i]的编辑距离也是i</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(la):</span><br><span class="line">        dp[i][<span class="number">0</span>] = i</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(lb):</span><br><span class="line">        dp[<span class="number">0</span>][i] = i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, la):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, lb):</span><br><span class="line">            <span class="comment"># dp[i][j]: a的前i个字母到b的前j个字母的最短编辑距离</span></span><br><span class="line">            <span class="comment"># 枚举最后一步的编辑方式: 增 dp[i - 1][j] + 1, 删 dp[i][j - 1] + 1, 改dp[i - 1][j - 1] + 1</span></span><br><span class="line">            <span class="comment"># 如果a[i] == b[j] 不需要编辑, 直接是dp[i - 1][j - 1]</span></span><br><span class="line">            dp[i][j] = min(dp[i - <span class="number">1</span>][j] + <span class="number">1</span>, dp[i][j - <span class="number">1</span>] + <span class="number">1</span>, dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + (a[i] != b[j]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[la - <span class="number">1</span>][lb - <span class="number">1</span>] &lt;= t</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    n, m = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().split()]</span><br><span class="line">    s = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(n):</span><br><span class="line">        s.append(input())</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(m):</span><br><span class="line">        q, t = input().split()</span><br><span class="line">        t = int(t)</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            res += can_solve(s[i], q, t)</span><br><span class="line">        print(res)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;AcWing-902-最短编辑距离&quot;&gt;&lt;a href=&quot;#AcWing-902-最短编辑距离&quot; class=&quot;headerlink&quot; title=&quot;AcWing 902. 最短编辑距离&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acwing.com/problem/content/904/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AcWing 902. 最短编辑距离&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定两个字符串A和B，现在要将A经过若干操作变为B，可进行的操作有：&lt;br&gt;删除–将字符串A中的某个字符删除。&lt;br&gt;插入–在字符串A的某个位置插入某个字符。&lt;br&gt;替换–将字符串A中的某个字符替换为另一个字符。&lt;br&gt;现在请你求出，将A变为B至少需要进行多少次操作。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="算法学习" scheme="http://blog.ichenfei.com/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="dp" scheme="http://blog.ichenfei.com/tags/dp/"/>
    
      <category term="编辑距离" scheme="http://blog.ichenfei.com/tags/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>hexo deploy配置免输入github账号密码</title>
    <link href="http://blog.ichenfei.com/2019/11/24/hexo-deploy%E9%85%8D%E7%BD%AE%E5%85%8D%E8%BE%93%E5%85%A5github%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/"/>
    <id>http://blog.ichenfei.com/2019/11/24/hexo-deploy%E9%85%8D%E7%BD%AE%E5%85%8D%E8%BE%93%E5%85%A5github%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/</id>
    <published>2019-11-24T07:42:27.000Z</published>
    <updated>2019-11-30T10:09:35.406Z</updated>
    
    <content type="html"><![CDATA[<p>每次hexo d都要输入密码太烦了</p><a id="more"></a><h3 id="生成ssh密钥对"><a href="#生成ssh密钥对" class="headerlink" title="生成ssh密钥对"></a>生成ssh密钥对</h3><p>Linux系统:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>Windows可以使用Xshell生成秘钥对, 之后导入到 <code>C:\Users\Username\.ssh</code>目录下</p><p>公钥命名为<code>id_rsa.pub</code>, 私钥命名为<code>id_rsa</code></p><h3 id="github添加ssh公钥"><a href="#github添加ssh公钥" class="headerlink" title="github添加ssh公钥"></a>github添加ssh公钥</h3><p>方法一: 在个人profile里添加公钥</p><p><code>Your profile</code> -&gt; <code>SSH and GPG keys</code> -&gt; <code>New SSH key</code> -&gt; 复制生成的公钥 -&gt; </p><p>方法二: 项目的设置里面添加</p><p><code>Settings</code> -&gt;  <code>Deploy keys</code> -&gt; <code>Add Deploy key</code> -&gt; 复制公钥 -&gt; 勾选<code>Allow write access</code> -&gt; <code>Add new</code></p><h3 id="设置远程git地址："><a href="#设置远程git地址：" class="headerlink" title="设置远程git地址："></a>设置远程git地址：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog/.deploy_git</span><br><span class="line">git remote rm origin</span><br><span class="line">git remote <span class="built_in">set</span>-url origin git@github.com:lovehhf/lovehhf.github.io.git</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git remote -v   <span class="comment"># 查看当前传输协议</span></span><br><span class="line">origin    git@github.com:lovehhf/lovehhf.github.io.git (fetch)</span><br><span class="line">origin    git@github.com:lovehhf/lovehhf.github.io.git (push)</span><br></pre></td></tr></table></figure><p>编辑配置文件<code>_config.yml</code>, 将<code>deploy</code>的<code>https</code>协议改为使用<code>git</code>协议:</p><p>vim _config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="string">git@github.com:lovehhf/lovehhf.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>部署到github: <code>hexo d -g</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每次hexo d都要输入密码太烦了&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>树莓派配置v2ray客户端</title>
    <link href="http://blog.ichenfei.com/2019/11/24/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8v2ray%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>http://blog.ichenfei.com/2019/11/24/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8v2ray%E5%AE%A2%E6%88%B7%E7%AB%AF/</id>
    <published>2019-11-24T05:06:03.000Z</published>
    <updated>2019-11-30T14:05:24.279Z</updated>
    
    <content type="html"><![CDATA[<p>git用起来太慢了, 几乎不能用 , ss又经常被封端口, 并不是很稳, 使用最近很流行的v2ray试试</p><a id="more"></a><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>使用一键安装脚本安装，参考<a href="https://www.v2ray.com/chapter_00/install.html" target="_blank" rel="noopener">v2ray官方教程-下载安装</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br></pre></td></tr></table></figure><p>需要从github下载安装包, 可能会出现网络错误, 可能先从<a href="https://github.com/v2ray/v2ray-core/releases" target="_blank" rel="noopener">v2ray-core/releases</a>将安装包<code>v2ray-linux-arm.zip</code>下载到树莓派, 使用<code>--local</code>参数从本地安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -O v2ray_install.sh  https://install.direct/go.sh</span><br><span class="line">chmod +x v2ray_install.sh </span><br><span class="line">sudo ./v2ray_install.sh --<span class="built_in">local</span> v2ray-linux-arm.zip</span><br></pre></td></tr></table></figure><h2 id="配置v2ray客户端"><a href="#配置v2ray客户端" class="headerlink" title="配置v2ray客户端"></a>配置v2ray客户端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">sudo su - root</span><br><span class="line">cat &gt; /etc/v2ray/config.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"inbounds"</span>: [&#123;</span><br><span class="line">    <span class="string">"port"</span>: 1080,</span><br><span class="line">    <span class="string">"listen"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"protocol"</span>: <span class="string">"socks"</span>,</span><br><span class="line">    <span class="string">"settings"</span>: &#123;</span><br><span class="line">      <span class="string">"udp"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="string">"outbounds"</span>: [&#123;</span><br><span class="line">    <span class="string">"protocol"</span>: <span class="string">"vmess"</span>,</span><br><span class="line">    <span class="string">"settings"</span>: &#123;</span><br><span class="line">      <span class="string">"vnext"</span>: [&#123;</span><br><span class="line">        <span class="string">"address"</span>: <span class="string">"server ip"</span>,</span><br><span class="line">        <span class="string">"port"</span>: 10086,</span><br><span class="line">        <span class="string">"users"</span>: [&#123; <span class="string">"id"</span>: <span class="string">"b831381d-6324-4d53-ad4f-8cda48b30811"</span> &#125;]</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="string">"protocol"</span>: <span class="string">"freedom"</span>,</span><br><span class="line">    <span class="string">"tag"</span>: <span class="string">"direct"</span>,</span><br><span class="line">    <span class="string">"settings"</span>: &#123;&#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="string">"routing"</span>: &#123;</span><br><span class="line">    <span class="string">"domainStrategy"</span>: <span class="string">"IPOnDemand"</span>,</span><br><span class="line">    <span class="string">"rules"</span>: [&#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">      <span class="string">"ip"</span>: [<span class="string">"geoip:private"</span>],</span><br><span class="line">      <span class="string">"outboundTag"</span>: <span class="string">"direct"</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># address改为服务端ip， port改为服务端端口, id改为服务端用户ID</span></span><br></pre></td></tr></table></figure><h2 id="开启v2ray服务"><a href="#开启v2ray服务" class="headerlink" title="开启v2ray服务"></a>开启v2ray服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start v2ray</span><br><span class="line">pi@raspberrypi:~ $ ps -ef|grep v2ray</span><br><span class="line">root     18007     1  0 14:20 ?        00:00:00 /usr/bin/v2ray/v2ray -config /etc/v2ray/config.json</span><br></pre></td></tr></table></figure><h2 id="使用ProxyChains-NG配置全局代理"><a href="#使用ProxyChains-NG配置全局代理" class="headerlink" title="使用ProxyChains-NG配置全局代理"></a>使用ProxyChains-NG配置全局代理</h2><p>切换到root用户编译安装proxychains-ng</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/rofl0r/proxychains-ng.git  </span><br><span class="line">sudo su - root</span><br><span class="line"><span class="built_in">cd</span> /home/pi/proxychains-ng-master/</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>添加配置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cp ./src/proxychains.conf /etc/proxychains.conf</span><br><span class="line"></span><br><span class="line">vim /etc/proxychains.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将最后的 socks4 127.0.0.1 9095 改为 socks5  127.0.0.1 9050</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> <span class="comment"># 退出root用户</span></span><br></pre></td></tr></table></figure><p>在需要使用代理的命令前面加上<code>proxychains4</code>, 如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~/proxychains-ng-master $ curl ip.sb</span><br><span class="line">113.xxx.xxx.xxx</span><br><span class="line">pi@raspberrypi:~/proxychains-ng-master $ proxychains4 curl ip.sb</span><br><span class="line">[proxychains] config file found: /etc/proxychains.conf</span><br><span class="line">[proxychains] preloading /usr/<span class="built_in">local</span>/lib/libproxychains4.so</span><br><span class="line">[proxychains] DLL init: proxychains-ng 4.14</span><br><span class="line">[proxychains] Strict chain  ...  127.0.0.1:1080  ...  ip.sb:80  ...  OK</span><br><span class="line">34.92.xxx.xxx</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git用起来太慢了, 几乎不能用 , ss又经常被封端口, 并不是很稳, 使用最近很流行的v2ray试试&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello Hexo</title>
    <link href="http://blog.ichenfei.com/2019/11/24/hello-world/"/>
    <id>http://blog.ichenfei.com/2019/11/24/hello-world/</id>
    <published>2019-11-23T18:00:12.045Z</published>
    <updated>2019-11-23T19:54:14.768Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>树莓派实现温控风扇</title>
    <link href="http://blog.ichenfei.com/2019/11/23/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%9E%E7%8E%B0%E6%B8%A9%E6%8E%A7%E9%A3%8E%E6%89%87/"/>
    <id>http://blog.ichenfei.com/2019/11/23/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%9E%E7%8E%B0%E6%B8%A9%E6%8E%A7%E9%A3%8E%E6%89%87/</id>
    <published>2019-11-23T15:17:54.000Z</published>
    <updated>2019-11-23T15:21:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>树莓派风扇声音太大了, 非常影响睡觉， 不开风扇cpu温度又很容易太高了</p><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>杜邦线母对母2根, 公对母2根, 直接淘宝买40pin的2排</li><li>三极管S85501个，淘宝买2块钱50个包邮<ul><li>S8550为PNP型三极管，基极施加低电平时才导通电路，如果是用的NPN型三极管则与之相反</li></ul></li><li>树莓派小风扇1个</li></ul><p>树莓派引脚:</p><p><img src="https://www.ichenfei.com/wp-content/uploads/2019/11/94a0bbf61ddf391db56f1cc23bfd7ef3.png" alt></p><p>三极管引脚:</p><p><img src="https://www.ichenfei.com/wp-content/uploads/2019/11/82c6e79943b3e1afd4b2fa97620df019.png" alt></p><ul><li>E: 发射机 <ul><li>正级(接电源正极, 5V)</li><li>可接树莓派4号引脚</li></ul></li><li>B: 基级 <ul><li>信号极控制是否通电(GPIO)</li><li>可以接树莓派8号引脚</li></ul></li><li>C：集电极<ul><li>负极 (接电源负极, Ground)</li><li>可以接树莓派6号引脚</li></ul></li></ul><h2 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h2><ol><li>风扇红线(正极)接树莓派5V，如4号引脚</li><li>风扇黑线(负极)接三极管C(集电集)</li><li>三极管E(发射极)接树莓派Ground, 如6号引脚</li><li>三极管B级, 接树莓派GPIO，如8号引脚</li></ol><p>如图: <img src="https://www.ichenfei.com/wp-content/uploads/2019/11/d2be99357e792fc7968637f9e2d98af7.png" alt></p><h2 id="Python程序风扇"><a href="#Python程序风扇" class="headerlink" title="Python程序风扇"></a>Python程序风扇</h2><p>在python交互式命令行下测试下是否可行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~/script $ python</span><br><span class="line">Python 2.7.16 (default, Apr  6 2019, 01:42:57) </span><br><span class="line">[GCC 8.2.0] on linux2</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; import RPi.GPIO as GPIO</span><br><span class="line">&gt;&gt;&gt; GPIO_OUT = 14</span><br><span class="line">&gt;&gt;&gt; GPIO.setmode(GPIO.BCM)</span><br><span class="line">&gt;&gt;&gt; GPIO.setwarnings(False)</span><br><span class="line">&gt;&gt;&gt; GPIO.setup(GPIO_OUT, GPIO.OUT, initial=GPIO.HIGH)</span><br><span class="line">&gt;&gt;&gt; GPIO.output(GPIO_OUT, GPIO.LOW)  # 风扇开</span><br><span class="line">&gt;&gt;&gt; GPIO.output(GPIO_OUT, GPIO.HIGH) # 风扇关闭</span><br><span class="line"></span><br><span class="line">注：PNP型三极管GPIO.LOW是开, HIGH是关， NPN型相反</span><br></pre></td></tr></table></figure></p><h2 id="完整程序"><a href="#完整程序" class="headerlink" title="完整程序:"></a>完整程序:</h2><p><a href="https://raw.githubusercontent.com/lovehhf/raspi_script/master/smartfan.py" target="_blank" rel="noopener">smartfan.py</a></p><p>主要逻辑:</p><ol><li>读取<code>/sys/class/thermal/thermal_zone0/temp</code>内容, 除1000获取CPU温度</li><li>风扇初始状态设置为关闭状态</li><li>温度低于55度且当前处于关闭状态开机风扇</li><li>温度低于45度且当前处于开启状态关闭风扇</li><li>每隔15秒查一下温度并更新状态</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/pi/script &amp;&amp; cd /home/pi/script</span><br><span class="line">wget https://raw.githubusercontent.com/lovehhf/raspi_script/master/smartfan.py</span><br></pre></td></tr></table></figure><h2 id="supervisor管理python进程"><a href="#supervisor管理python进程" class="headerlink" title="supervisor管理python进程"></a>supervisor管理python进程</h2><p>添加配置文件: <code>vim /etc/supervisor/conf.d/fan.conf</code>:<br>内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[program:fan]</span><br><span class="line">command=/usr/bin/python3 /home/pi/script/smartfan.py</span><br><span class="line">user=root</span><br><span class="line">directory=/home/pi/script</span><br><span class="line">stdout_logfile=/var/log/supervisor/%(program_name)s-stdout.log</span><br><span class="line">stderr_logfile=/var/log/supervisor/%(program_name)s-stderr.log</span><br><span class="line">autorestart=true</span><br><span class="line">autostart=true</span><br></pre></td></tr></table></figure></p><p>重启supervisor并查看状态:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:/var/log $ sudo systemctl restart supervisor</span><br><span class="line">pi@raspberrypi:/var/log $ sudo supervisorctl status fan</span><br><span class="line">fan                              RUNNING   pid 3903, uptime 0:01:26</span><br></pre></td></tr></table></figure></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install stress</span><br><span class="line">stress -c 50   # cpu压力测试, 开50个进程不停地sqrt, 一下子风扇就转起来了</span><br><span class="line">tail -f /var/log/fan_control.log  # 查看日志</span><br></pre></td></tr></table></figure><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接:"></a>参考链接:</h4><ul><li><a href="https://segmentfault.com/a/1190000017225701" target="_blank" rel="noopener">三极管打造树莓派温控风扇</a></li><li><a href="https://blog.newnius.com/raspberry-control-fan-with-transistor.html" target="_blank" rel="noopener">树莓派—利用三极管控制散热风扇</a></li><li><a href="https://www.jianshu.com/p/20fea50cf483" target="_blank" rel="noopener">用Python做一个温控风扇-树莓派</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;树莓派风扇声音太大了, 非常影响睡觉， 不开风扇cpu温度又很容易太高了&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title> 二叉树的前中后序遍历的非递归实现(Python)		</title>
    <link href="http://blog.ichenfei.com/2019/05/02/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E4%B8%AD%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E7%9A%84%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0(Python)/"/>
    <id>http://blog.ichenfei.com/2019/05/02/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E4%B8%AD%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E7%9A%84%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0(Python)/</id>
    <published>2019-05-01T16:19:58.000Z</published>
    <updated>2019-11-30T11:49:52.620Z</updated>
    
    <content type="html"><![CDATA[<p>二叉树的前中后序遍历的非递归实现</p><a id="more"></a><h2 id="二叉树定义"><a href="#二叉树定义" class="headerlink" title="二叉树定义"></a>二叉树定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, L=None, R=None)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = L</span><br><span class="line">        self.right = R</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">List2TN</span><span class="params">(lst, needs=None)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    lst: a leetcode way tree list</span></span><br><span class="line"><span class="string">    needs: A list of Int. The nodes whose indexes provided in this list would be returned.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    nit = []</span><br><span class="line">    root = TreeNode(lst[<span class="number">0</span>])</span><br><span class="line">    tnQ = [root]</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> needs <span class="keyword">and</span> i <span class="keyword">in</span> needs:</span><br><span class="line">        nit.append(root)</span><br><span class="line">    <span class="keyword">while</span> i &lt; len(lst):</span><br><span class="line">        cur = tnQ.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> lst[i] != <span class="literal">None</span>:</span><br><span class="line">            cur.left = TreeNode(lst[i])</span><br><span class="line">            tnQ.append(cur.left)</span><br><span class="line">            <span class="keyword">if</span> needs <span class="keyword">and</span> i <span class="keyword">in</span> needs:</span><br><span class="line">                nit.append(cur.left)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= len(lst):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> lst[i] != <span class="literal">None</span>:</span><br><span class="line">            cur.right = TreeNode(lst[i])</span><br><span class="line">            tnQ.append(cur.right)</span><br><span class="line">            <span class="keyword">if</span> needs <span class="keyword">and</span> i <span class="keyword">in</span> needs:</span><br><span class="line">                nit.append(cur.right)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> needs:</span><br><span class="line">        <span class="keyword">return</span> root, nit</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><h2 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h2><ul><li><a href="https://leetcode.com/problems/binary-tree-preorder-traversal/submissions/" target="_blank" rel="noopener">144. 二叉树的前序遍历</a></li></ul><h4 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h4><p>1、首先申请一个新的栈，记为stack。<br>2、然后将头节点head压入stack中。<br>3、每次从stack中弹出栈顶节点，记为cur，然后打印cur节点的值。如果cur右孩子不为空的话，将cur的右孩子先压入stack中。最后如果cur的左孩子不为空的话，将cur的左孩子压入stack中。<br>4、不断重复步骤3，直到stack为空，全部过程结束。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(self,root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        根-&gt;左-&gt;右</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        stack = [root]</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            cur = stack.pop()</span><br><span class="line">            res.append(cur.val)</span><br><span class="line">            <span class="keyword">if</span> cur.right:</span><br><span class="line">                stack.append(cur.right)</span><br><span class="line">            <span class="keyword">if</span> cur.left:</span><br><span class="line">                stack.append(cur.left)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><ul><li><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/" target="_blank" rel="noopener">94. 二叉树的中序遍历</a></li></ul><h4 id="具体过程-1"><a href="#具体过程-1" class="headerlink" title="具体过程"></a>具体过程</h4><ul><li>1、申请一个新的栈，记为<code>stack</code>，申请一个变量<code>cur</code>，初始时令<code>stack</code>为空,<code>cur</code>等于头节点。</li><li>2、先把<code>cur</code>节点压入栈中，对以cur节点为头的整棵子树来说，依次把整棵树的左边界压入栈中，即不断令<code>cur=cur.left</code>，然后重复步骤2。</li><li>3、不断重复步骤2，直到发现<code>cur</code>为空，此时从<code>stack</code>中弹出一个节点，记为<code>node</code>。打印<code>node</code>的值，并让<code>cur=node.right</code>，然后继续重复步骤2。</li><li>4、当<code>stack</code>为空并且<code>cur</code>为空时，整个过程结束。</li></ul><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        左-&gt;根-&gt;右</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        stack = []</span><br><span class="line">        cur = root</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> cur:</span><br><span class="line">            <span class="keyword">if</span> cur:</span><br><span class="line">                stack.append(cur)</span><br><span class="line">                cur = cur.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node = stack.pop()</span><br><span class="line">                res.append(node.val)</span><br><span class="line">                cur = node.right</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><ul><li><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/" target="_blank" rel="noopener">145. 二叉树的后序遍历</a> </li></ul><h4 id="具体过程-2"><a href="#具体过程-2" class="headerlink" title="具体过程"></a>具体过程</h4><p><strong>方法一：使用两个栈实现</strong></p><p>1、申请一个栈，记为s1，然后将头节点压入s1中。<br>2、从s1中弹出的节点记为cur，然后先把cur的左孩子压入s1中，然后把cur的右孩子压入s1中。<br>3、在整个过程中，每一个从s1中弹出的节点都放进第二个栈s2中。<br>4、不断重复步骤2和步骤3，直到s1为空，过程停止。<br>5、从s2中依次弹出节点并打印，打印的顺序就是后序遍历的顺序了。</p><p><strong>方法二：使用一个栈实现</strong></p><p>1、申请一个栈，记为stack，将头节点压入stack，同时设置两个变量h和c。在整个流程中，h代表最近一次弹出并打印的节点，c代表当前stack的栈顶节点，初始时令h为头节点，c为null。<br>2、每次令c等于当前stack的栈顶节点，但是不从stack中弹出节点，此时分以下三种情况。<br>（1）如果c的左孩子不为空，并且h不等于c的左孩子，也不等于c的右孩子，则把c的左孩子压入stack中。<br>（2）如果情况1不成立，并且c的右孩子不为空，并且h不等于c的右孩子，则把c的右孩子压入stack中。<br>（3）如果情况1和情况2都不成立，那么从stack中弹出c并打印，然后令h等于c。<br>3、一直重复步骤2，直到stack为空，过程停止。</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><p>方法一:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        左-&gt;右-&gt;根</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        stack1 = [root]</span><br><span class="line">        stack2 = []</span><br><span class="line">        <span class="keyword">while</span> stack1:</span><br><span class="line">            cur = stack1.pop()</span><br><span class="line">            stack2.append(cur.val)</span><br><span class="line">            <span class="keyword">if</span> cur.left:</span><br><span class="line">                stack1.append(cur.left)</span><br><span class="line">            <span class="keyword">if</span> cur.right:</span><br><span class="line">                stack1.append(cur.right)</span><br><span class="line">        <span class="keyword">return</span> stack2[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure></p><h2 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h2><h4 id="bfs"><a href="#bfs" class="headerlink" title="bfs"></a>bfs</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def bfs(root):</span><br><span class="line">    queue = []</span><br><span class="line">    # 根节点加入队列中</span><br><span class="line">    queue.append(root)</span><br><span class="line">    res = []</span><br><span class="line">    while queue:</span><br><span class="line">        temp = queue.pop(0)</span><br><span class="line">        l = temp.left</span><br><span class="line">        r = temp.right</span><br><span class="line">        if l:</span><br><span class="line">            queue.append(l)</span><br><span class="line">        if r:</span><br><span class="line">            queue.append(r)</span><br><span class="line">        res.append(temp.val)</span><br><span class="line">    return res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二叉树的前中后序遍历的非递归实现&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://blog.ichenfei.com/categories/Python/"/>
    
      <category term="算法学习" scheme="http://blog.ichenfei.com/categories/Python/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="二叉树" scheme="http://blog.ichenfei.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="数据结构" scheme="http://blog.ichenfei.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title> Python的列表乘法问题		</title>
    <link href="http://blog.ichenfei.com/2019/04/28/Python%E7%9A%84%E5%88%97%E8%A1%A8%E4%B9%98%E6%B3%95%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.ichenfei.com/2019/04/28/Python%E7%9A%84%E5%88%97%E8%A1%A8%E4%B9%98%E6%B3%95%E9%97%AE%E9%A2%98/</id>
    <published>2019-04-28T06:41:58.000Z</published>
    <updated>2019-11-23T18:21:10.175Z</updated>
    
    <content type="html"><![CDATA[<p>分清楚是传的是值还是引用</p><a id="more"></a><p>Python在对列表的初始化过程中会经常用到列表的乘法生成一个含有重复元素的列表,例如 <code>l = [0]*10</code> 但是如果列表中包含有可变数据类型(列表、字典)的话使用<code>*</code>操作符便会有很大问题。 <code>*</code>操作符在实现上是复制了值的引用，而不是创建了新的对象。如果其中一个数据改变，其他的也会跟着改变。 如下代码:</p><pre><code>m = 2n = 3dp = [[0 for _ in range(n+1)] for _ in range(m+1)]dp2 = [[0] * (n + 1)] * (m + 1)dp2[1][1] = 1dp[1][1] = 1print(dp)print(dp2)</code></pre><p>在<code>pythontutor</code>中可视化代码运行过程，可以看出使用dp2中的使用<code>*</code>操作符生成的列表中的3个元素都指向的同一个<code>list</code>。而使用列表生成式生成的二维列表指向的都是不同的<code>list</code>。 故python在初始化列表中尽量要使用列表生成器，而尽量少使用列表乘法。 <img src="https://www.ichenfei.com/wp-content/uploads/2019/04/f8670646faaf32805ee52d158a5a7242.png" alt> 参考链接: - <a href="https://blog.csdn.net/wangxinginnlp/article/details/53201450" target="_blank" rel="noopener">小心python的list乘法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分清楚是传的是值还是引用&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://blog.ichenfei.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title> Python zip函数使用技巧		</title>
    <link href="http://blog.ichenfei.com/2019/03/29/Python%20zip%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>http://blog.ichenfei.com/2019/03/29/Python%20zip%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</id>
    <published>2019-03-29T14:22:25.000Z</published>
    <updated>2019-11-23T18:27:10.636Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>zip() 函数用于将可迭代对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象。 如果各个可迭代对象的元素个数不一致，则返回的对象长度与最短的可迭代对象相同。 利用 <em> 号操作符，与zip相反，进行解压。 zip(a,b…): 将多个列表压缩为一个二维列表 zip(</em>a): 将一个二维列表解压为多个列表</p><a id="more"></a><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre><code>语法:zip(iter1 [,iter2 [...]])参数:iter1:一个或多个可迭代对象（字符串、列表、元祖、字典）返回值:--&gt; zip object</code></pre><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例:"></a>使用示例:</h2><p><img src="https://www.ichenfei.com/wp-content/uploads/2019/03/03d295c17556dbd50160ff8f321c8780.png" alt></p><h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><h2 id="1、将两个列表合并为字典"><a href="#1、将两个列表合并为字典" class="headerlink" title="1、将两个列表合并为字典"></a>1、将两个列表合并为字典</h2><pre><code>a = [chr(ord(&apos;a&apos;)+i) for i in range(0,10)]b = list(range(0,26))print(a)print(b)print(dict(zip(a,b)))[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;, &apos;i&apos;, &apos;j&apos;][0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]{&apos;a&apos;: 0, &apos;b&apos;: 1, &apos;c&apos;: 2, &apos;d&apos;: 3, &apos;e&apos;: 4, &apos;f&apos;: 5, &apos;g&apos;: 6, &apos;h&apos;: 7, &apos;i&apos;: 8, &apos;j&apos;: 9}</code></pre><h2 id="2、-旋转矩阵"><a href="#2、-旋转矩阵" class="headerlink" title="2、 旋转矩阵"></a>2、 旋转矩阵</h2><h3 id="示例1-顺时针旋转"><a href="#示例1-顺时针旋转" class="headerlink" title="示例1 顺时针旋转:"></a>示例1 顺时针旋转:</h3><p><a href="https://leetcode-cn.com/problems/rotate-image/" target="_blank" rel="noopener">LeetCode 48. 旋转图像</a></p><blockquote><p>给定一个 <code>n × n</code> 的二维矩阵表示一个图像。将图像顺时针旋转 <code>90</code> 度。</p></blockquote><p>说明： 你必须在原地旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋转图像。</p><pre><code>示例 1:给定matrix = [  [1,2,3],  [4,5,6],  [7,8,9]],原地旋转输入矩阵，使其变为:[  [7,4,1],  [8,5,2],  [9,6,3]]</code></pre><p>思路:</p><pre><code>先zip(*)解压为,再对每行翻转[[1,2,3],[4,5,6],[7,8,9]] -&gt; [[1,4,7],[2,5,8],[3,6,9]] -&gt; [[7,4,1],[8,5,2],[9,6,3]]或者:[[1,2,3],[4,5,6],[7,8,9]] -&gt; [[7,8,9],[4,5,6],[1,2,3]] -&gt; [[7,4,1],[8,5,2],[9,6,3]]</code></pre><p>代码:</p><pre><code>def rotate(matrix):    matrix[:] = list(zip(*matrix[::-1]))def rotate2(matrix):    matrix[:] = [x[::-1] for x in list(zip(*matrix))]A = [  [1,2,3],  [4,5,6],  [7,8,9]]rotate(A)print(A)[(7, 4, 1), (8, 5, 2), (9, 6, 3)]</code></pre><h3 id="示例2-逆时针旋转"><a href="#示例2-逆时针旋转" class="headerlink" title="示例2 逆时针旋转:"></a>示例2 逆时针旋转:</h3><p><a href="https://leetcode-cn.com/problems/spiral-matrix/" target="_blank" rel="noopener">LeetCode 54. 螺旋矩阵</a></p><blockquote><p>给定一个包含 m x n 个元素的矩阵（m 行, n 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。</p></blockquote><pre><code>示例 1:输入:[ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ]]输出: [1,2,3,6,9,8,7,4,5]</code></pre><p>代码:</p><pre><code>def spiralOrder(matrix):    &quot;&quot;&quot;    :param matrix: 二维列表    :return: 顺时针输出的一维数组    &quot;&quot;&quot;    res = []    while matrix:        &quot;&quot;&quot;        删除第一行 然后二维数组逆时针旋转90度 继续再删除第一行 一直这样直到没有可以输出的了        [          [5, 6, 7, 8],   ===&gt;   [[8,12],[7,11],[6,10],[5,9]]          [9,10,11,12]        ]        &quot;&quot;&quot;        res += matrix.pop(0)        if matrix:            matrix[:] = zip(*list(map(reversed,matrix)))    return resprint(spiralOrder([  [1, 2, 3, 4],  [5, 6, 7, 8],  [9,10,11,12]]))[1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;zip() 函数用于将可迭代对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象。 如果各个可迭代对象的元素个数不一致，则返回的对象长度与最短的可迭代对象相同。 利用 &lt;em&gt; 号操作符，与zip相反，进行解压。 zip(a,b…): 将多个列表压缩为一个二维列表 zip(&lt;/em&gt;a): 将一个二维列表解压为多个列表&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://blog.ichenfei.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Jupyter Notebook使用记录		</title>
    <link href="http://blog.ichenfei.com/2019/03/15/Jupyter%20Notebook%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://blog.ichenfei.com/2019/03/15/Jupyter%20Notebook%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2019-03-15T05:11:13.000Z</published>
    <updated>2019-11-24T07:02:56.219Z</updated>
    
    <content type="html"><![CDATA[<p>Jupyter Notebook是基于网页的用于交互计算的应用程序。其可被应用于全过程计算：开发、文档编写、运行代码和展示结果。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyterlab</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">jupyter --<span class="built_in">help</span></span><br><span class="line">jupyter notebook --<span class="built_in">help</span></span><br><span class="line">jupyter notebook --<span class="built_in">help</span>-all</span><br><span class="line">jupyter notebook --generate-config  生成配置文件</span><br><span class="line">jupyter notebook --port  指定端口,默认888</span><br><span class="line">jupyter notebook --ip    指定ip,默认localhost</span><br><span class="line">jupyter notebook --no-browser  启动时不打开浏览器</span><br><span class="line">jupyter notebook password 设置密码</span><br><span class="line"></span><br><span class="line">jupyter kernelspec list  查看内核</span><br><span class="line">jupyter kernelspec remove &#123;name&#125;  删除内核</span><br></pre></td></tr></table></figure><p>示例:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --no-browser --ip 0.0.0.0 --port 8080</span><br></pre></td></tr></table></figure></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>设置访问密码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; jupyter notebook password</span><br><span class="line"></span><br><span class="line">Enter password:</span><br><span class="line">Verify password:</span><br><span class="line">[NotebookPasswordApp] Wrote hashed password to C:\Users\xxx\.jupyter\jupyter_notebook_config.json</span><br></pre></td></tr></table></figure><p>添加内核:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">workon py36_env</span><br><span class="line">pip install ipykernel</span><br><span class="line">python -m ipykernel install --name <span class="string">"py36env"</span></span><br></pre></td></tr></table></figure></p><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><table><thead><tr><th>模式</th><th>组合键</th><th>说明</th></tr></thead><tbody><tr><td>编辑模式</td><td>Esc</td><td>切换到命令模式</td></tr><tr><td>命令模式</td><td>A</td><td>在当前Cell上方新建Cell</td></tr><tr><td>命令模式</td><td>B</td><td>在当前Cell下方新建Cell</td></tr><tr><td>命令模式</td><td>DD</td><td>删除当前单元</td></tr><tr><td>命令模式</td><td>Y</td><td>切换到Code状态</td></tr><tr><td>命令模式</td><td>M</td><td>切换到Markdown状态</td></tr><tr><td>命令模式</td><td>II</td><td>中断内核运行</td></tr><tr><td>命令模式</td><td>L</td><td>显示代码框中每行的数字标识</td></tr><tr><td>命令模式</td><td>shift + v</td><td>粘贴单元格</td></tr><tr><td>命令模式</td><td>shift + L</td><td>显示全部代码框中每行的数字标识</td></tr><tr><td>编辑模式</td><td>shift + Tab</td><td>查看当前函数的说明（光标要在函数的位置内）</td></tr><tr><td>命令/编辑模式</td><td>shift + enter</td><td>运行当前单元后,进入下一单元</td></tr><tr><td>命令/编辑模式</td><td>ctrl + enter</td><td>只运行当前单元,不进入下一单元</td></tr></tbody></table><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><ul><li><a href="https://jupyter.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">Jupyter Documentation</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jupyter Notebook是基于网页的用于交互计算的应用程序。其可被应用于全过程计算：开发、文档编写、运行代码和展示结果。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://blog.ichenfei.com/categories/Python/"/>
    
      <category term="tools" scheme="http://blog.ichenfei.com/categories/Python/tools/"/>
    
    
  </entry>
  
  <entry>
    <title> Windows安装Burpsuite过程记录		</title>
    <link href="http://blog.ichenfei.com/2018/11/11/Windows%E5%AE%89%E8%A3%85Burpsuite%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
    <id>http://blog.ichenfei.com/2018/11/11/Windows%E5%AE%89%E8%A3%85Burpsuite%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</id>
    <published>2018-11-11T03:15:36.000Z</published>
    <updated>2019-11-23T18:37:35.167Z</updated>
    
    <content type="html"><![CDATA[<p>Windows安装Burpsuite</p><a id="more"></a><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><h2 id="1、官网下载并安装社区版"><a href="#1、官网下载并安装社区版" class="headerlink" title="1、官网下载并安装社区版"></a>1、官网下载并安装社区版</h2><pre><code>https://portswigger.net/burp/communitydownload </code></pre><h2 id="2、吾爱破解下载keygen"><a href="#2、吾爱破解下载keygen" class="headerlink" title="2、吾爱破解下载keygen"></a>2、吾爱破解下载keygen</h2><pre><code>https://down.52pojie.cn/Tools/Network_Analyzer/Burp_Suite_Pro_v1.7.37_Loader_Keygen.zip</code></pre><p>到BurpSuite安装目录下,目录下有个<code>burpsuite_community.jar</code>,备份为<code>burpsuite_community.jar.bak</code> 把解压得到的<code>burpsuite_pro_v1.7.37.jar</code>复制到此文件夹并重命名为<code>burpsuite_community.jar</code> <img src="https://www.ichenfei.com/wp-content/uploads/2019/03/be6c7fe93fa087c30a5482c4876e95d3.png" alt> 把解压得到的<code>burp-loader-keygen.jar</code>复制到此文件夹</p><h2 id="破解过程"><a href="#破解过程" class="headerlink" title="破解过程"></a>破解过程</h2><p>打开burp,顺利的话会出现输入license key的界面 双击打开burp-loader-keygen.jar,复制粘贴,点next 点<code>manual activation</code> 复制burp中的request到<code>activation request</code>,自动生成response,粘贴到burp的response中,点next 出现成功界面</p><h2 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h2><p>burpsuite.bat</p><pre><code>@echo offjava -Xbootclasspath/p:burp-loader-keygen.jar -jar burpsuite_community.jarexit</code></pre><p>点击启动的时候会有个cmd小窗口,很烦 添加个vbs脚本,去掉cmd窗口的弹框 <code>burpsuite.vbs:</code></p><pre><code>set ws=wscript.createobject(&quot;wscript.shell&quot;)ws.run &quot;burpsuite.bat /start&quot;,0</code></pre><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接:"></a>参考链接:</h4><ul><li><a href="https://www.52pojie.cn/thread-691448-1-1.html" target="_blank" rel="noopener">Burp Suite Pro Loader&amp;Keygen By surferxyz（更新新版，附带v1.7.37原版）</a></li><li><a href="https://blog.csdn.net/hometown5/article/details/79532347" target="_blank" rel="noopener">Burp Suite v1.7.32破解升级pro</a></li><li><a href="http://ximcx.cn/post-110.html" target="_blank" rel="noopener">Burp Suite Pro2.0.07破解版-2018.10.04更新</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Windows安装Burpsuite&lt;/p&gt;
    
    </summary>
    
    
      <category term="tools" scheme="http://blog.ichenfei.com/categories/tools/"/>
    
    
      <category term="Burpsuite" scheme="http://blog.ichenfei.com/tags/Burpsuite/"/>
    
      <category term="抓包工具" scheme="http://blog.ichenfei.com/tags/%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title> Sublime Text写markdown粘贴图片问题		</title>
    <link href="http://blog.ichenfei.com/2018/08/08/Sublime%20Text%E5%86%99markdown%E7%B2%98%E8%B4%B4%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.ichenfei.com/2018/08/08/Sublime%20Text%E5%86%99markdown%E7%B2%98%E8%B4%B4%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/</id>
    <published>2018-08-08T09:09:14.000Z</published>
    <updated>2019-11-24T07:06:51.830Z</updated>
    
    <content type="html"><![CDATA[<p>Sublime Text写markdown粘贴图片问题</p><a id="more"></a><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在<code>sulime text</code>里面书写<code>markdown</code>的时候,碰到需要粘贴图片的问题，图片和文本不是一种格式，因此不能直接粘贴,每次图片都需要手动保存文件</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>安装<code>ImagePaste</code>插件,按下ctrl+v的时候，把自动把图片保存的你写的md文件的同级目录，并且会创建一个和md文件同名的文件夹 在md文件类型里面按下ctrl+v的时候，自动生成链接标签。如下：</p><h2 id="sublime-使用-markdown-相关"><a href="#sublime-使用-markdown-相关" class="headerlink" title="sublime 使用 markdown 相关"></a>sublime 使用 markdown 相关</h2><p>插件<code>OmniMarkupPreviewer</code>快捷键</p><ul><li>Ctrl+Alt+O: 在浏览器中预览markdown</li><li>Ctrl+Alt+X: 保存为HTML</li><li>Ctrl+Alt+C: 将Markdown复制HTML源码到剪贴板上</li></ul><p><a href="https://packagecontrol.io/packages/OmniMarkupPreviewer" target="_blank" rel="noopener">OmniMarkupPreviewer-packages地址</a> <a href="https://github.com/timonwong/OmniMarkupPreviewer" target="_blank" rel="noopener">OmniMarkupPreviewer-Github地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sublime Text写markdown粘贴图片问题&lt;/p&gt;
    
    </summary>
    
    
      <category term="markdown" scheme="http://blog.ichenfei.com/categories/markdown/"/>
    
    
      <category term="ImagePaste" scheme="http://blog.ichenfei.com/tags/ImagePaste/"/>
    
      <category term="markdown" scheme="http://blog.ichenfei.com/tags/markdown/"/>
    
      <category term="OmniMarkupPreviewer" scheme="http://blog.ichenfei.com/tags/OmniMarkupPreviewer/"/>
    
      <category term="sublime text" scheme="http://blog.ichenfei.com/tags/sublime-text/"/>
    
  </entry>
  
  <entry>
    <title> 解决supervisor无法启动es的问题		</title>
    <link href="http://blog.ichenfei.com/2018/08/07/%E8%A7%A3%E5%86%B3supervisor%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8es%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.ichenfei.com/2018/08/07/%E8%A7%A3%E5%86%B3supervisor%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8es%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2018-08-07T08:55:20.000Z</published>
    <updated>2019-11-23T18:37:21.664Z</updated>
    
    <content type="html"><![CDATA[<p>解决supervisor无法启动es的问题<br><a id="more"></a></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>虚拟机<code>ubuntu18.04 es6.3.0</code> 修改<code>network.host: 0.0.0.0</code>后终端能正常启动es,而<code>supervisor</code>却启动失败 报错如下</p><pre><code>[2018-08-07T16:42:03,539][INFO ][o.e.d.DiscoveryModule    ] [jx0BXwT] using discovery type [zen][2018-08-07T16:42:05,009][INFO ][o.e.n.Node               ] [jx0BXwT] initialized[2018-08-07T16:42:05,010][INFO ][o.e.n.Node               ] [jx0BXwT] starting ...[2018-08-07T16:42:05,247][INFO ][o.e.t.TransportService   ] [jx0BXwT] publish_address {192.168.163.134:9300}, bound_addresses {[::]:9300}[2018-08-07T16:42:05,297][INFO ][o.e.b.BootstrapChecks    ] [jx0BXwT] bound or publishing to a non-loopback address, enforcing bootstrap checksERROR: [1] bootstrap checks failed[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536][2018-08-07T16:42:05,322][INFO ][o.e.n.Node               ] [jx0BXwT] stopping ...[2018-08-07T16:42:05,371][INFO ][o.e.n.Node               ] [jx0BXwT] stopped[2018-08-07T16:42:05,372][INFO ][o.e.n.Node               ] [jx0BXwT] closing ...[2018-08-07T16:42:05,385][INFO ][o.e.n.Node               ] [jx0BXwT] closed[2018-08-07T16:42:05,388][INFO ][o.e.x.m.j.p.NativeController] Native controller process has stopped - no new native processes can be started</code></pre><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><pre><code>sudo vim /etc/supervisor/supervisord.conf </code></pre><p><code>[supervisord]</code>中添加</p><pre><code>minfds=65536minprocs=32768</code></pre><p><img src="https://www.ichenfei.com/wp-content/uploads/2018/08/d12224319113724d419eb55ec6b1824c.png" alt> 重启 <code>supervisor</code> 服务可解决</p><pre><code>sudo service supervisor restart</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.tech1024.cn/original/2962.html" target="_blank" rel="noopener">Elasticsearch在Centos 7上的安装与配置</a></li><li><a href="https://blog.csdn.net/sinat_21302587/article/details/77645676" target="_blank" rel="noopener">supervisord 启动elasticsearch 失败</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解决supervisor无法启动es的问题&lt;br&gt;
    
    </summary>
    
    
      <category term="elasticsearch" scheme="http://blog.ichenfei.com/categories/elasticsearch/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 终端使用shadowsocks全局代理		</title>
    <link href="http://blog.ichenfei.com/2017/11/16/Ubuntu%20%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8shadowsocks%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86/"/>
    <id>http://blog.ichenfei.com/2017/11/16/Ubuntu%20%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8shadowsocks%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86/</id>
    <published>2017-11-16T02:29:24.000Z</published>
    <updated>2019-11-24T06:56:20.958Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu 终端使用shadowsocks全局代理</p><a id="more"></a><h2 id="配置-ShadowSocks-客户端"><a href="#配置-ShadowSocks-客户端" class="headerlink" title="配置 ShadowSocks 客户端"></a>配置 ShadowSocks 客户端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-pip</span><br><span class="line">sudo pip install shadowsocks</span><br><span class="line">sudo vim /etc/ssclient.conf</span><br></pre></td></tr></table></figure><p>配置文件如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>:<span class="string">"serverip"</span>,</span><br><span class="line">    <span class="attr">"server_port"</span>:<span class="number">12345</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"password"</span>:<span class="string">"ss密码"</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"workers"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置说明:</p><ul><li>“server”<ul><li>服务端ip</li></ul></li><li>“method”<ul><li>加密方式</li></ul></li><li>“password”<ul><li>服务端密码</li></ul></li><li>“fast_open”<ul><li>可选 true 或 false。如果你的服务器 Linux 内核在3.7+，可以开启 fast_open 以降低延迟。开启方法： echo 3 &gt; /proc/sys/net/ipv4/tcp_fastopen 开启之后，将 fast_open 的配置设置为 true 即可</li></ul></li></ul><p>开启shadowsocks:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tmux</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 SS</span></span><br><span class="line">sudo nohup sslocal -c /etc/ssclient.conf &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="comment"># 查看进程</span></span><br><span class="line">sudo ps aux |grep sslocal |grep -v <span class="string">"grep"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加开启启动</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"nohup /usr/local/bin/sslocal -c /etc/ssclient.conf /dev/null 2&gt;&amp;1 &amp;"</span> &gt;&gt; /etc/rc.local</span><br></pre></td></tr></table></figure><p>如果启动<code>sslocal</code>出现错误:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AttributeError: /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1: undefined symbol: EVP_CIPHER_CTX_cleanup</span><br></pre></td></tr></table></figure></p><p>参考解决方法: <a href="https://github.com/shadowsocks/shadowsocks/issues/646#issuecomment-267977330" target="_blank" rel="noopener">run sslocal raise error</a>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U git+https://github.com/shadowsocks/shadowsocks.git@master</span><br></pre></td></tr></table></figure><h2 id="使用-privoxy-将Sock5代理转化为Http代理"><a href="#使用-privoxy-将Sock5代理转化为Http代理" class="headerlink" title="使用 privoxy 将Sock5代理转化为Http代理"></a>使用 privoxy 将Sock5代理转化为Http代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install privoxy -y</span><br></pre></td></tr></table></figure><p>修改配置文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/privoxy/config /etc/privoxy/config.bak     <span class="comment"># 备份配置文件</span></span><br><span class="line">sed -i <span class="string">'/^#/d'</span> /etc/privoxy/config                      <span class="comment"># 删除#开头的注释行(太多了,看着累)</span></span><br><span class="line">sudo vim /etc/privoxy/config                            <span class="comment"># 修改配置文件</span></span><br></pre></td></tr></table></figure><p>找到 <code>listen-address</code> 确保有这行代码 <code>listen-address 127.0.0.1:8118</code><br>找到 <code>forward-socks5</code> 确保有这行代码(没有自己加) <code>forward-socks5 / 127.0.0.1:1080 .</code></p><p>配置文件如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">user-manual /usr/share/doc/privoxy/user-manual</span><br><span class="line">confdir /etc/privoxy</span><br><span class="line">logdir /var/log/privoxy</span><br><span class="line">actionsfile match-all.action # Actions that are applied to all sites and maybe overruled later on.</span><br><span class="line">actionsfile default.action   # Main actions file</span><br><span class="line">actionsfile user.action      # User customizations</span><br><span class="line">filterfile default.filter</span><br><span class="line">filterfile user.filter      # User customizations</span><br><span class="line">logfile logfile</span><br><span class="line">listen-address  127.0.0.1:8118</span><br><span class="line">listen-address  [::1]:8118</span><br><span class="line">toggle  1</span><br><span class="line">enable-remote-toggle  0</span><br><span class="line">enable-remote-http-toggle  0</span><br><span class="line">enable-edit-actions 0</span><br><span class="line">enforce-blocks 0</span><br><span class="line">buffer-limit 4096</span><br><span class="line">enable-proxy-authentication-forwarding 0</span><br><span class="line">forwarded-connect-retries  0</span><br><span class="line">accept-intercepted-requests 0</span><br><span class="line">allow-cgi-request-crunching 0</span><br><span class="line">split-large-forms 0</span><br><span class="line">keep-alive-timeout 5</span><br><span class="line">tolerate-pipelining 1</span><br><span class="line">socket-timeout 300</span><br><span class="line">forward-socks5 / 127.0.0.1:1080 .</span><br></pre></td></tr></table></figure></p><p>启动<code>privoxy</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service privoxy start</span><br><span class="line">sudo service privoxy status</span><br></pre></td></tr></table></figure><p>配置转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">"http://127.0.0.1:8118"</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">"http://127.0.0.1:8118"</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># curl 4.icanhazip.com</span></span><br><span class="line">35.201.129.180</span><br></pre></td></tr></table></figure><h2 id="也可以使用-Polipo-代替-Privoxy"><a href="#也可以使用-Polipo-代替-Privoxy" class="headerlink" title="也可以使用 Polipo 代替 Privoxy"></a>也可以使用 Polipo 代替 Privoxy</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install polipo -y</span><br><span class="line"></span><br><span class="line">cp /etc/polipo/config /etc/polipo/config.bak</span><br><span class="line"></span><br><span class="line">cat &gt; /etc/polipo/config&lt;&lt;EOF</span><br><span class="line">logSyslog = <span class="literal">true</span></span><br><span class="line">logFile = /var/<span class="built_in">log</span>/polipo/polipo.log</span><br><span class="line">proxyAddress = <span class="string">"0.0.0.0"</span></span><br><span class="line">socksParentProxy = <span class="string">"127.0.0.1:1080"</span></span><br><span class="line">socksProxyType = socks5</span><br><span class="line">chunkHighMark = 50331648</span><br><span class="line">objectHighMark = 16384</span><br><span class="line">serverMaxSlots = 64</span><br><span class="line">serverSlots = 16</span><br><span class="line">serverSlots1 = 32</span><br><span class="line">EOF</span><br><span class="line">sudo /etc/init.d/polipo restart</span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">"http://127.0.0.1:8123/"</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">"http://127.0.0.1:8123/"</span></span><br></pre></td></tr></table></figure><p><img src="https://www.ichenfei.com/wp-content/uploads/2017/11/2449c06687ad793c5b742df6dcfc6b70.png" alt></p><p><img src="https://www.ichenfei.com/wp-content/uploads/2017/11/025b2a1366ab09d083610fd104729a60.png" alt><br>服务器重启后，下面两句需要重新执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo sslocal -c /etc/ssclient.conf -d start</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">"http://127.0.0.1:8123/"</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">"http://127.0.0.1:8123/"</span></span><br></pre></td></tr></table></figure><p>取消代理:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unset http_proxy</span><br><span class="line">unset https_proxy</span><br></pre></td></tr></table></figure><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接:"></a>参考链接:</h4><ul><li><a href="http://blog.forecho.com/ubuntu-use-shadowsocks-and-privoxy.html" target="_blank" rel="noopener">Ubuntu 使用 ShadowSocks + Privoxy 代理</a></li><li><a href="https://linux.cn/article-7119-1.html" target="_blank" rel="noopener">五大开源 Web 代理服务器横评：Squid、Privoxy、Varnish、Polipo、Tinyproxy</a></li><li><a href="https://jingsam.github.io/2016/05/08/setup-shadowsocks-http-proxy-on-ubuntu-server.html" target="_blank" rel="noopener">Ubuntu server命令行配置shadowsocks全局代理</a></li><li><a href="https://www.igfw.net/archives/947" target="_blank" rel="noopener">使用Privoxy、Polipo、3proxy转化Sock5代理为Http代理</a></li></ul><h2 id="使用supervisor管理shadowsocks进程"><a href="#使用supervisor管理shadowsocks进程" class="headerlink" title="使用supervisor管理shadowsocks进程"></a>使用<code>supervisor</code>管理<code>shadowsocks</code>进程</h2><p>安装supervisor<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install supervisor</span><br></pre></td></tr></table></figure></p><p>添加ss配置文件</p><p>vim /etc/supervisor/conf.d/ss.conf<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[program:ss]</span><br><span class="line"><span class="built_in">command</span>=/usr/<span class="built_in">local</span>/bin/sslocal -c /etc/ssclient.conf</span><br><span class="line">user=root</span><br><span class="line">directory=/root</span><br><span class="line">stdout_logfile=/var/<span class="built_in">log</span>/supervisor/%(program_name)s-stdout.log</span><br><span class="line">stderr_logfile=/var/<span class="built_in">log</span>/supervisor/%(program_name)s-stderr.log</span><br><span class="line">killasgroup=<span class="literal">true</span></span><br><span class="line">stopasgroup=<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>使用<code>supervisor</code>启动ss:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo service supervisor restart</span><br><span class="line">sudo supervisorctl restart ss</span><br><span class="line"></span><br><span class="line">root@huang:~<span class="comment"># lsof -i :1080</span></span><br><span class="line">COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">sslocal 3148 root    3u  IPv4  33691      0t0  TCP localhost:socks (LISTEN)</span><br><span class="line">sslocal 3148 root    4u  IPv4  33692      0t0  UDP localhost:socks</span><br></pre></td></tr></table></figure></p><h2 id="为git协议设置代理"><a href="#为git协议设置代理" class="headerlink" title="为git协议设置代理"></a>为git协议设置代理</h2><h3 id="使用ProxyChains-NG"><a href="#使用ProxyChains-NG" class="headerlink" title="使用ProxyChains-NG"></a>使用ProxyChains-NG</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/rofl0r/proxychains-ng.git</span><br><span class="line"><span class="built_in">cd</span> proxychains-ng</span><br><span class="line">sudo ./configure</span><br><span class="line">sudo make &amp;&amp; make install</span><br></pre></td></tr></table></figure><!--cp ./src/proxychains.conf /etc/proxychains.confsed -i -e '/^#/d' -e '/^$/d' /etc/proxychains.conf将`socks4 127.0.0.1 9095`改为`socks5 127.0.0.1 1080`--><p>sudo vim /etc/proxychains.conf</p><p>添加如下配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">strict_chain</span><br><span class="line">proxy_dns </span><br><span class="line">remote_dns_subnet 224</span><br><span class="line">tcp_read_time_out 15000</span><br><span class="line">tcp_connect_time_out 8000</span><br><span class="line">localnet 127.0.0.0/255.0.0.0</span><br><span class="line">quiet_mode</span><br><span class="line"></span><br><span class="line">[ProxyList]</span><br><span class="line">socks5  127.0.0.1 1080</span><br></pre></td></tr></table></figure></p><p>在需要代理的命令前加上 <code>proxychains4</code> ，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 curl ip.sb</span><br><span class="line"></span><br><span class="line">proxychains4 git clone git://github.com/WordPress/WordPress.git</span><br></pre></td></tr></table></figure></p><h3 id="使用tsocks"><a href="#使用tsocks" class="headerlink" title="使用tsocks"></a>使用tsocks</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install tsocks</span><br><span class="line">vim /etc/tsocks.conf</span><br></pre></td></tr></table></figure><p>配置如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">local = 192.168.0.0/255.255.255.0</span><br><span class="line">local = 10.0.0.0/255.0.0.0</span><br><span class="line">path &#123;</span><br><span class="line">reaches = 150.0.0.0/255.255.0.0</span><br><span class="line">reaches = 150.1.0.0:80/255.255.0.0</span><br><span class="line">server = 10.1.7.25</span><br><span class="line">server_type = 5</span><br><span class="line">default_user = delius</span><br><span class="line">default_pass = hello</span><br><span class="line">&#125;</span><br><span class="line">server = 127.0.0.1</span><br><span class="line">server_type = 5</span><br><span class="line">server_port = 1080</span><br></pre></td></tr></table></figure></p><p>使用:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsocks curl ip.sb</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ubuntu 终端使用shadowsocks全局代理&lt;/p&gt;
    
    </summary>
    
    
      <category term="tools" scheme="http://blog.ichenfei.com/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title> Ubuntu16.04搭建ngrok服务		</title>
    <link href="http://blog.ichenfei.com/2017/11/15/Ubuntu16.04%E6%90%AD%E5%BB%BAngrok%E6%9C%8D%E5%8A%A1/"/>
    <id>http://blog.ichenfei.com/2017/11/15/Ubuntu16.04%E6%90%AD%E5%BB%BAngrok%E6%9C%8D%E5%8A%A1/</id>
    <published>2017-11-15T12:19:56.000Z</published>
    <updated>2019-11-23T18:38:13.615Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu16.04搭建ngrok服务<br><a id="more"></a></p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖:"></a>安装依赖:</h2><pre><code>sudo apt-get install build-essential golang mercurial git</code></pre><p>如果你的 Ubuntu版本是14.04及以下，<code>apt-get install golang</code>安装的<code>golang</code>是1.2版本的,而ngrok要求<code>golang</code>版本大于1.3,导致编译客户端时报错：</p><pre><code>src/github.com/gorilla/websocke... undefined: sync.Poolmake: * [client] Error 2</code></pre><p>参考DigitalOcean给的<a href="https://www.digitalocean.com/community/tutorials/how-to-install-go-1-6-on-ubuntu-14-04" target="_blank" rel="noopener">教程</a>手动安装golang:</p><pre><code>sudo curl -O https://storage.googleapis.com/golang/go1.6.linux-amd64.tar.gzsudo tar -zxvf go1.6.linux-amd64.tar.gzsudo mv go /usr/localecho &quot;export PATH=\$PATH:/usr/local/go/bin&quot; &gt;&gt; ~/.profilesource ~/.profile</code></pre><h2 id="编译ngrok服务端与客户端"><a href="#编译ngrok服务端与客户端" class="headerlink" title="编译ngrok服务端与客户端"></a>编译ngrok服务端与客户端</h2><p>从<code>github</code>获取ngrok源码</p><pre><code>git clone https://github.com/inconshreveable/ngrok.git ngrok</code></pre><p>生成并替换源码里默认的<code>ssl</code>证书</p><pre><code>cd ngrokexport NGROK_DOMAIN=&quot;ngrok.ichenfei.com&quot;openssl genrsa -out base.key 2048openssl req -new -x509 -nodes -key base.key -days 10000 -subj &quot;/CN=$NGROK_DOMAIN&quot; -out base.pemopenssl genrsa -out server.key 2048openssl req -new -key server.key -subj &quot;/CN=$NGROK_DOMAIN&quot; -out server.csropenssl x509 -req -in server.csr -CA base.pem -CAkey base.key -CAcreateserial -days 10000 -out server.crtcp base.pem assets/client/tls/ngrokroot.crt</code></pre><h3 id="编译服务端"><a href="#编译服务端" class="headerlink" title="编译服务端:"></a>编译服务端:</h3><pre><code>sudo make release-server</code></pre><h3 id="编译客户端"><a href="#编译客户端" class="headerlink" title="编译客户端"></a>编译客户端</h3><pre><code>Windows 64位:sudo GOOS=darwin GOARCH=amd64 make release-clientWindows 32位:sudo GOOS=darwin GOARCH=386 make release-clientmac osx 64位：sudo GOOS=darwin GOARCH=amd64 make release-clientlinux：sudo GOOS=linux GOARCH=amd64 make release-client</code></pre><p>编译完成后再<code>ngrok/bin</code>目录会出现一个类似于的<code>windows_amd64</code>文件夹,里面有客户端 <code>cd bin/windows_amd64 &amp;&amp; sz ngrox</code> 保存到本机</p><h2 id="运行ngrok服务"><a href="#运行ngrok服务" class="headerlink" title="运行ngrok服务:"></a>运行ngrok服务:</h2><pre><code>tmuxsudo ./bin/ngrokd -tlsKey=server.key -tlsCrt=server.crt -domain=&quot;ngrok.ichenfei.com&quot; -httpAddr=&quot;:8000&quot; -httpsAddr=&quot;:8001&quot; -tunnelAddr=&quot;:4000&quot;-domain: 指定域名,需要与生成证书使用的域名一致-httpAddr: 指定http端口(需要是一个未被占用的端口,可随意指定)-httpsAddr: 指定https端口-tunnelAddr ngrok通道的端口号，这个端口是Ngrok用来通信的，所以这个端口在服务器上和客户端上设置必须要对应才可以正常的链接，默认不填写是4443</code></pre><h2 id="客户端运行"><a href="#客户端运行" class="headerlink" title="客户端运行"></a>客户端运行</h2><p>写一个简单的配置文件，随意命名如 <code>ngrok.cfg</code>：</p><pre><code>server_addr: ngrok.ichenfei.com:4443trust_host_root_certs: false</code></pre><p>指定子域名、要转发的协议和端口，以及配置文件，运行客户端：</p><pre><code>ngrok.exe -config=ngrok.cfg -subdomain=test -proto=http 80-config 指定配置文件-proto 指定协议-subdomain 指定子域名 (需要对域名做泛解析)</code></pre><p>没有在服务端指定的端口会随意选择一个端口转发 ngrok会随意选择一个端口对本机的22端口进行转发 如果想一次性转发多个端口或者想指定远程的对应端口，需要完善ngrok.cfg</p><pre><code>server_addr: ngrok.domain.com:4000trust_host_root_certs: falsetunnels: ssh:  remote_port: 1122  proto:   tcp: 22 ss:  emote_port: 1080  proto:   tcp: 1080 ftp:  remote_port: 20  proto:   tcp: 20 http:  subdomain: www  proto:   http: 80   https: 192.168.240.3:8080</code></pre><p>启动特定的转发tunnel:</p><pre><code>./ngrok -config ngrok.cfg start ssh当然也可以将所有配置全部转发./ngrok -config ngrok.cfg start-all</code></pre><p><img src="https://www.ichenfei.com/wp-content/uploads/2017/11/aa2b3313dc552dcb323300728c1a88fa.png" alt="ngrok转发http协议"> <img src="https://www.ichenfei.com/wp-content/uploads/2017/11/f2b2059e69955d95000f314f9cf9331c.png" alt="ngrok转发http协议1"> <img src="https://www.chengyingyou.com/article/7" alt="Ngrok内网穿透"> 由于ngrok可以转发所有tcp协议,所以<code>22</code>,<code>3389</code>,<code>3306</code>等端口也可以通过ngrok转发到公网,使用<code>-proto=tcp</code>指定<code>tcp</code>协议</p><pre><code>./ngrok -config=ngrok.cfg -proto=tcp 22</code></pre><p><img src="https://www.ichenfei.com/wp-content/uploads/2017/11/1b0e2a7228ea244804c6fa4abe5a723c.png" alt> 如果不搭建自己的ngrok服务,也可以到<code>ngork.com</code><a href="https://ngrok.com/download" target="_blank" rel="noopener">下载</a>官方提供的ngrok客户端。ngrok官网提供的服务基于<code>ngrok 2.x</code>(未开源),使用github源码搭建的服务器基于<code>ngrok 1.x</code>,用法有很大不同,可以参考给的<code>EXAMPLES</code>使用</p><pre><code>EXAMPLES:    ngrok http 80                    # secure public URL for port 80 web server    ngrok http -subdomain=baz 8080   # port 8080 available at baz.ngrok.io    ngrok http foo.dev:80            # tunnel to host:port instead of localhost    ngrok tcp 22                     # tunnel arbitrary TCP traffic to port 22    ngrok tls -hostname=foo.com 443  # TLS traffic for foo.com to port 443    ngrok start foo bar baz          # start tunnels from the configuration file</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ubuntu16.04搭建ngrok服务&lt;br&gt;
    
    </summary>
    
    
      <category term="tools" scheme="http://blog.ichenfei.com/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title> Python使用virtualenv和virtualenvwrapper		</title>
    <link href="http://blog.ichenfei.com/2017/11/10/Python%E4%BD%BF%E7%94%A8virtualenv%E5%92%8Cvirtualenvwrapper/"/>
    <id>http://blog.ichenfei.com/2017/11/10/Python%E4%BD%BF%E7%94%A8virtualenv%E5%92%8Cvirtualenvwrapper/</id>
    <published>2017-11-10T11:36:37.000Z</published>
    <updated>2019-11-30T10:34:53.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="virtualenv-介绍"><a href="#virtualenv-介绍" class="headerlink" title="virtualenv 介绍"></a>virtualenv 介绍</h2><blockquote><p>在使用 Python 开发的过程中，工程一多，难免会碰到不同的工程依赖不同版本的库的问题；亦或者是在开发过程中不想让物理环境里充斥各种各样的库，引发未来的依赖灾难。此时，我们需要对于不同的工程使用不同的虚拟环境来保持开发环境以及宿主环境的清洁。virtualenv便是一个可以帮助我们管理不同 Python 环境的绝好工具。 可以在系统中建立多个不同并且相互不干扰的虚拟环境。</p></blockquote><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure><h3 id="新建虚拟环境"><a href="#新建虚拟环境" class="headerlink" title="新建虚拟环境"></a>新建虚拟环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv scrapytest</span><br></pre></td></tr></table></figure><h3 id="指定python版本"><a href="#指定python版本" class="headerlink" title="指定python版本"></a>指定python版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv -p 指定python版本路径</span><br></pre></td></tr></table></figure><h3 id="激活环境"><a href="#激活环境" class="headerlink" title="激活环境"></a>激活环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> scrapytest/bin/activate <span class="comment"># windows 是在Scripts文件夹下deactivate.bat</span></span><br></pre></td></tr></table></figure><h3 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><h2 id="使用-virtualenvwrapper-管理虚拟环境"><a href="#使用-virtualenvwrapper-管理虚拟环境" class="headerlink" title="使用 virtualenvwrapper 管理虚拟环境"></a>使用 virtualenvwrapper 管理虚拟环境</h2><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenvwrapper <span class="comment"># windows下使用: pip install virtualenvwrapper-win</span></span><br></pre></td></tr></table></figure><h2 id="添加环境变量-WORKON-HOME"><a href="#添加环境变量-WORKON-HOME" class="headerlink" title="添加环境变量: WORKON_HOME"></a>添加环境变量: WORKON_HOME</h2><p>Linux: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile </span><br><span class="line"></span><br><span class="line">在最后添加: </span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> WORKON\_HOME=<span class="variable">$HOME</span>/.virtualenvs </span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/bin/virtualenvwrapper.sh </span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile <span class="comment">#使配置立即生效</span></span><br></pre></td></tr></table></figure><p>Windows: <img src="https://www.ichenfei.com/wp-content/uploads/2017/11/dce990ec141f4d3cb0a5bd28e44f1fbe.png" alt></p><h2 id="命令列表"><a href="#命令列表" class="headerlink" title="命令列表"></a>命令列表</h2><ul><li>workon:列出虚拟环境列表</li><li>workon [虚拟环境名称]:切换虚拟环境</li><li>lsvirtualenv:同workon</li><li>mkvirtualenv :新建虚拟环境</li><li>rmvirtualenv :删除虚拟环境</li><li>deactivate: 离开虚拟环境</li></ul><p>参考链接:</p><ul><li><a href="https://segmentfault.com/a/1190000004079979" target="_blank" rel="noopener">聊聊 virtualenv 和 virtualenvwrapper 实践</a></li><li><a href="http://www.jianshu.com/p/dcfe4cab4933" target="_blank" rel="noopener">virtualenvwrapper-win安装</a></li><li><a href="http://blog.csdn.net/shaququ/article/details/54292043" target="_blank" rel="noopener">windows下搭建virtualenv、virtualenvwrapper虚拟环境</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;virtualenv-介绍&quot;&gt;&lt;a href=&quot;#virtualenv-介绍&quot; class=&quot;headerlink&quot; title=&quot;virtualenv 介绍&quot;&gt;&lt;/a&gt;virtualenv 介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在使用 Python 开发的过程中，工程一多，难免会碰到不同的工程依赖不同版本的库的问题；亦或者是在开发过程中不想让物理环境里充斥各种各样的库，引发未来的依赖灾难。此时，我们需要对于不同的工程使用不同的虚拟环境来保持开发环境以及宿主环境的清洁。virtualenv便是一个可以帮助我们管理不同 Python 环境的绝好工具。 可以在系统中建立多个不同并且相互不干扰的虚拟环境。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://blog.ichenfei.com/categories/Python/"/>
    
    
      <category term="virtualenv" scheme="http://blog.ichenfei.com/tags/virtualenv/"/>
    
      <category term="virtualenvwrapper" scheme="http://blog.ichenfei.com/tags/virtualenvwrapper/"/>
    
  </entry>
  
  <entry>
    <title> 几款用于穿透内网的代理工具		</title>
    <link href="http://blog.ichenfei.com/2017/11/08/%E5%87%A0%E6%AC%BE%E7%94%A8%E4%BA%8E%E7%A9%BF%E9%80%8F%E5%86%85%E7%BD%91%E7%9A%84%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <id>http://blog.ichenfei.com/2017/11/08/%E5%87%A0%E6%AC%BE%E7%94%A8%E4%BA%8E%E7%A9%BF%E9%80%8F%E5%86%85%E7%BD%91%E7%9A%84%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7/</id>
    <published>2017-11-08T07:21:44.000Z</published>
    <updated>2019-11-30T11:38:42.239Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>当内网中的主机没有外网IP地址要被外网稳定访问时,可以使用反向代理工具将主机端口映射出去,从而通过访问外网就能访问到内网中的主机</p></blockquote><a id="more"></a><h2 id="ngrok"><a href="#ngrok" class="headerlink" title="ngrok"></a>ngrok</h2><blockquote><p>ngrok 是一个反向代理，通过在公共的端点和本地运行的 Web 服务器之间建立一个安全的通道。ngrok 可捕获和分析所有通道上的流量，便于后期分析和重放</p></blockquote><p><img src="https://www.ichenfei.com/wp-content/uploads/2017/11/9249f4129b5274569da3cc7576b3e33d.png" alt></p><ul><li><a href="https://ngrok.com/" target="_blank" rel="noopener">ngrok官网</a></li><li><a href="https://github.com/inconshreveable/ngrok" target="_blank" rel="noopener">github: inconshreveable/ngrok</a></li><li>自己搭建ngrok服务：<ul><li>参考:</li><li><a href="https://imququ.com/post/self-hosted-ngrokd.html" target="_blank" rel="noopener">搭建 ngrok 服务实现内网穿透 – imququ.com</a></li><li><a href="https://zhyack.github.io/posts/2017_04_07-Ngrok.html" target="_blank" rel="noopener">内网穿透——ngrok的搭建与使用 – zhyack.github.io</a></li><li><a href="http://blog.just4fun.site/build-ngrok-server.html" target="_blank" rel="noopener">建ngrok服务（内网穿透） –blog.just4fun.site</a></li></ul></li></ul><p>ngrok官网提供的服务基于ngrok 2.x,而ngrok只开源了1.x的源码,要搭建ngrok服务只能使用1.x的客户端连接。</p><h2 id="lanproxy"><a href="#lanproxy" class="headerlink" title="lanproxy:"></a>lanproxy:</h2><blockquote><p>Lanproxy是一个将局域网个人电脑、服务器代理到公网的内网穿透工具<br>目前仅支持tcp流量转发，可支持任何tcp上层协议（访问内网网站、本地支付接口调试、微信小程序调试、ssh访问、远程桌面…）</p></blockquote><p><img src="https://www.ichenfei.com/wp-content/uploads/2017/11/7797ae475bcbb69d56ede9b046ce699c.png" alt></p><ul><li><a href="https://lanproxy.thingsglobal.org/" target="_blank" rel="noopener">lanproxy.thingsglobal.org</a></li><li><a href="https://github.com/ffay/lanproxy" target="_blank" rel="noopener">源代码 – github</a></li><li><a href="https://github.com/ffay/lanproxy/files/1439965/proxy-server-0.1-beta.zip" target="_blank" rel="noopener">proxy-server-0.1-beta.zip</a></li><li><a href="https://lanproxy.thingsglobal.org/proxy-client-0.1-beta.zip" target="_blank" rel="noopener">proxy-client-0.1-beta.zip</a></li><li>lanproxy服务搭建<ul><li>参考:</li><li><a href="https://segmentfault.com/a/1190000011155909" target="_blank" rel="noopener">使用lanproxy进行内网穿透</a></li><li><a href="http://blog.csdn.net/xmtblog/article/details/77943159" target="_blank" rel="noopener">业余草推荐一款局域网（内网）穿透工具lanproxy</a></li></ul></li></ul><h2 id="lcx-exe"><a href="#lcx-exe" class="headerlink" title="lcx.exe"></a>lcx.exe</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">服务端:</span><br><span class="line">lcx.exe -listen 51 33891</span><br><span class="line">客户端:</span><br><span class="line">lcx.exe -slave 服务端ip 51 127.0.0.1 3389</span><br><span class="line"></span><br><span class="line">这就用lcx.exe将客户端的3389转发到了服务端的33891上</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;当内网中的主机没有外网IP地址要被外网稳定访问时,可以使用反向代理工具将主机端口映射出去,从而通过访问外网就能访问到内网中的主机&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="tools" scheme="http://blog.ichenfei.com/categories/tools/"/>
    
    
      <category term="lanproxy" scheme="http://blog.ichenfei.com/tags/lanproxy/"/>
    
      <category term="ngrok" scheme="http://blog.ichenfei.com/tags/ngrok/"/>
    
      <category term="内网穿透" scheme="http://blog.ichenfei.com/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title> 使用Python 进行各进制间转换		</title>
    <link href="http://blog.ichenfei.com/2017/10/31/%E4%BD%BF%E7%94%A8Python%20%E8%BF%9B%E8%A1%8C%E5%90%84%E8%BF%9B%E5%88%B6%E9%97%B4%E8%BD%AC%E6%8D%A2/"/>
    <id>http://blog.ichenfei.com/2017/10/31/%E4%BD%BF%E7%94%A8Python%20%E8%BF%9B%E8%A1%8C%E5%90%84%E8%BF%9B%E5%88%B6%E9%97%B4%E8%BD%AC%E6%8D%A2/</id>
    <published>2017-10-31T04:01:25.000Z</published>
    <updated>2019-11-30T11:40:51.155Z</updated>
    
    <content type="html"><![CDATA[<ul><li>表示各进制的符号<br>  -b：二进制<br>  -o：八进制<br>  -d：十进制<br>  -x：十六进制 </li></ul><p>bin()、oct()、hex()返回值均为字符串，且分别带有0b、0o、0x前缀。 </p><a id="more"></a><h2 id="十进制转二进制："><a href="#十进制转二进制：" class="headerlink" title="十进制转二进制："></a>十进制转二进制：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: bin(<span class="number">192</span>)</span><br><span class="line">Out[<span class="number">6</span>]: <span class="string">'0b11000000'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: <span class="string">'&#123;0:b&#125;'</span>.format(<span class="number">192</span>)</span><br><span class="line">Out[<span class="number">7</span>]: <span class="string">'11000000'</span></span><br></pre></td></tr></table></figure><h2 id="十进制转八进制："><a href="#十进制转八进制：" class="headerlink" title="十进制转八进制："></a>十进制转八进制：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">42</span>]: oct(<span class="number">192</span>)</span><br><span class="line">Out[<span class="number">42</span>]: <span class="string">'0300'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]: <span class="string">'&#123;0:o&#125;'</span>.format(<span class="number">192</span>)</span><br><span class="line">Out[<span class="number">41</span>]: <span class="string">'300'</span></span><br></pre></td></tr></table></figure><h2 id="十进制转十六进制："><a href="#十进制转十六进制：" class="headerlink" title="十进制转十六进制："></a>十进制转十六进制：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">39</span>]: hex(<span class="number">192</span>)</span><br><span class="line">Out[<span class="number">39</span>]: <span class="string">'0xc0'</span></span><br><span class="line">In [<span class="number">40</span>]: <span class="string">'&#123;0:x&#125;'</span>.format(<span class="number">192</span>)</span><br><span class="line">Out[<span class="number">40</span>]: <span class="string">'c0'</span></span><br></pre></td></tr></table></figure><h2 id="n进制转10进制"><a href="#n进制转10进制" class="headerlink" title="n进制转10进制"></a>n进制转10进制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">int(<span class="string">'xxx'</span>,n)</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line">In [<span class="number">5</span>]: int(<span class="string">'c0a83090'</span>,<span class="number">16</span>)</span><br><span class="line">Out[<span class="number">5</span>]: <span class="number">3232247952L</span></span><br><span class="line"></span><br><span class="line">λ ping <span class="number">3232247952</span></span><br><span class="line"></span><br><span class="line">正在 Ping <span class="number">192.168</span><span class="number">.48</span><span class="number">.144</span> 具有 <span class="number">32</span> 字节的数据:</span><br><span class="line">来自 <span class="number">192.168</span><span class="number">.48</span><span class="number">.144</span> 的回复: 字节=<span class="number">32</span> 时间&lt;<span class="number">1</span>ms TTL=<span class="number">64</span></span><br><span class="line">来自 <span class="number">192.168</span><span class="number">.48</span><span class="number">.144</span> 的回复: 字节=<span class="number">32</span> 时间&lt;<span class="number">1</span>ms TTL=<span class="number">64</span></span><br><span class="line">来自 <span class="number">192.168</span><span class="number">.48</span><span class="number">.144</span> 的回复: 字节=<span class="number">32</span> 时间&lt;<span class="number">1</span>ms TTL=<span class="number">64</span></span><br><span class="line">来自 <span class="number">192.168</span><span class="number">.48</span><span class="number">.144</span> 的回复: 字节=<span class="number">32</span> 时间&lt;<span class="number">1</span>ms TTL=<span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="number">192.168</span><span class="number">.48</span><span class="number">.144</span> 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 = <span class="number">4</span>，已接收 = <span class="number">4</span>，丢失 = <span class="number">0</span> (<span class="number">0</span>% 丢失)，</span><br><span class="line">往返行程的估计时间(以毫秒为单位):</span><br><span class="line">    最短 = <span class="number">0</span>ms，最长 = <span class="number">0</span>ms，平均 = <span class="number">0</span>ms</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;表示各进制的符号&lt;br&gt;  -b：二进制&lt;br&gt;  -o：八进制&lt;br&gt;  -d：十进制&lt;br&gt;  -x：十六进制 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;bin()、oct()、hex()返回值均为字符串，且分别带有0b、0o、0x前缀。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://blog.ichenfei.com/categories/Python/"/>
    
    
  </entry>
  
</feed>
